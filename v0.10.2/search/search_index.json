{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"code/","title":"Modules","text":""},{"location":"code/#overview","title":"Overview","text":"<p>There are six modules used in this package:</p> Module Description Classes The <code>classes</code> module is designed for functions to be executed on classes; not within classes.For any methods/functions that should be added to classes, you should consider re-designing the original class, or sub-classing it to make further alterations. Bools The <code>bools</code> module is used how to manipulate and enhance Python booleans.Primarily, this module is used to store the <code>strtobool()</code> function, which used to be found in the <code>distutils.util</code> module, until it was deprecated. As mentioned in PEP632, we should re-implement this function in our own code. And that's what we've done here. Lists The <code>lists</code> module is used how to manipulate and enhance Python lists.Note that functions in this module will only take-in and manipulate existing <code>list</code> objects, and also output <code>list</code> objects. It will not sub-class the base <code>list</code> object, or create new '<code>list</code>-like' objects. It will always remain pure python types at it's core. Strings The <code>strings</code> module is for manipulating and checking certain string objects. Dictionaries The <code>dictionaries</code> module is used how to manipulate and enhance Python dictionaries.Note that functions in this module will only take-in and manipulate existing <code>dict</code> objects, and also output <code>dict</code> objects. It will not sub-class the base <code>dict</code> object, or create new '<code>dict</code>-like' objects. It will always remain pure python types at it's core. Checkers Check certain values against other objects. Output The <code>output</code> module is for streamlining how data is outputted.This includes <code>print()</code>'ing to the terminal and <code>log()</code>'ing to files. Retry The <code>retry</code> module is for enabling automatic retrying of a given function when a specific <code>Exception</code> is thrown. Defaults The <code>defaults</code> module is used how to set and control default values for our various Python processes."},{"location":"code/#testing","title":"Testing","text":"<p>This package is fully tested against:</p> <ol> <li>Unit tests</li> <li>Lint tests</li> <li>MyPy tests</li> <li>Build tests</li> </ol> <p>Tests are run in matrix against:</p> <ol> <li>Python Versions:<ol> <li><code>3.8</code></li> <li><code>3.9</code></li> <li><code>3.10</code></li> <li><code>3.11</code></li> <li><code>3.12</code></li> <li><code>3.13</code></li> </ol> </li> <li>Operatign Systems:<ol> <li><code>ubuntu-latest</code></li> <li><code>windows-latest</code></li> <li><code>macos-latest</code></li> </ol> </li> </ol>"},{"location":"code/#latest-code-coverage","title":"Latest Code Coverage","text":""},{"location":"code/bools/","title":"Bools","text":""},{"location":"code/bools/#toolbox_python.bools","title":"toolbox_python.bools","text":"<p>Summary</p> <p>The <code>bools</code> module is used how to manipulate and enhance Python booleans.</p> <p>Details</p> <p>Primarily, this module is used to store the <code>strtobool()</code> function, which used to be found in the <code>distutils.util</code> module, until it was deprecated. As mentioned in PEP632, we should re-implement this function in our own code. And that's what we've done here.</p>"},{"location":"code/bools/#toolbox_python.bools.STR_TO_BOOL_MAP","title":"STR_TO_BOOL_MAP  <code>module-attribute</code>","text":"<pre><code>STR_TO_BOOL_MAP: dict[str, bool] = {\n    \"y\": True,\n    \"yes\": True,\n    \"t\": True,\n    \"true\": True,\n    \"on\": True,\n    \"1\": True,\n    \"n\": False,\n    \"no\": False,\n    \"f\": False,\n    \"false\": False,\n    \"off\": False,\n    \"0\": False,\n}\n</code></pre> Summary <p>Map of string values to their corresponding boolean values.</p>"},{"location":"code/bools/#toolbox_python.bools.strtobool","title":"strtobool","text":"<pre><code>strtobool(value: str) -&gt; bool\n</code></pre> <p>Summary</p> <p>Convert a <code>str</code> value in to a <code>bool</code> value.</p> Details <p>This process is necessary because the <code>d</code>istutils` module was completely deprecated in Python 3.12.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The string value to convert. Valid input options are defined in <code>STR_TO_BOOL_MAP</code></p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the value parse'ed in to <code>value</code> is not a valid value to be able to convert to a <code>bool</code> value.</p> <p>Returns:</p> Type Description <code>bool</code> <p>A <code>True</code> or <code>False</code> value, having successfully converted <code>value</code>.</p> Examples Set up<pre><code>from toolbox_python.bools import strtobool\n</code></pre> <p>Example 1: `true` conversions<pre><code>&gt;&gt;&gt; print(strtobool(\"true\"))\n&gt;&gt;&gt; print(strtobool(\"t\"))\n&gt;&gt;&gt; print(strtobool(\"1\"))\n</code></pre> Terminal<pre><code>True\nTrue\nTrue\n</code></pre> <p>Conclusion: Successful conversion.</p> <p>Example 2: `false` conversions<pre><code>&gt;&gt;&gt; print(strtobool(\"false\"))\n&gt;&gt;&gt; print(strtobool(\"f\"))\n&gt;&gt;&gt; print(strtobool(\"0\"))\n</code></pre> Terminal<pre><code>False\nFalse\nFalse\n</code></pre> <p>Conclusion: Successful conversion.</p> <p>Example 3: invalid value<pre><code>&gt;&gt;&gt; print(strtobool(5))\n</code></pre> Terminal<pre><code>ValueError: Invalid bool value: '5'.\nFor `True`, must be one of: ['y', 'yes', 't', 'true', 'on', '1']\nFor `False`, must be one of: ['n', 'no', 'f', 'false', 'off', '0']\n</code></pre> <p>Conclusion: Invalid type.</p> References <ul> <li>PEP632</li> </ul> Source code in <code>src/toolbox_python/bools.py</code> <pre><code>def strtobool(value: str) -&gt; bool:\n    \"\"\"\n    !!! note \"Summary\"\n        Convert a `#!py str` value in to a `#!py bool` value.\n\n    ???+ abstract \"Details\"\n        This process is necessary because the `d`istutils` module was completely deprecated in Python 3.12.\n\n    Params:\n        value (str):\n            The string value to convert. Valid input options are defined in [`STR_TO_BOOL_MAP`][toolbox_python.bools.STR_TO_BOOL_MAP]\n\n    Raises:\n        ValueError:\n            If the value parse'ed in to `value` is not a valid value to be able to convert to a `#!py bool` value.\n\n    Returns:\n        (bool):\n            A `#!py True` or `#!py False` value, having successfully converted `value`.\n\n    ???+ example \"Examples\"\n\n        ```{.py .python linenums=\"1\" title=\"Set up\"}\n        from toolbox_python.bools import strtobool\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: `true` conversions\"}\n        &gt;&gt;&gt; print(strtobool(\"true\"))\n        &gt;&gt;&gt; print(strtobool(\"t\"))\n        &gt;&gt;&gt; print(strtobool(\"1\"))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        True\n        True\n        True\n        ```\n        !!! success \"Conclusion: Successful conversion.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: `false` conversions\"}\n        &gt;&gt;&gt; print(strtobool(\"false\"))\n        &gt;&gt;&gt; print(strtobool(\"f\"))\n        &gt;&gt;&gt; print(strtobool(\"0\"))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        False\n        False\n        False\n        ```\n        !!! success \"Conclusion: Successful conversion.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 3: invalid value\"}\n        &gt;&gt;&gt; print(strtobool(5))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        ValueError: Invalid bool value: '5'.\n        For `True`, must be one of: ['y', 'yes', 't', 'true', 'on', '1']\n        For `False`, must be one of: ['n', 'no', 'f', 'false', 'off', '0']\n        ```\n        !!! failure \"Conclusion: Invalid type.\"\n        &lt;/div&gt;\n\n    ??? question \"References\"\n        - [PEP632](https://peps.python.org/pep-0632/#migration-advice)\n    \"\"\"\n    try:\n        return STR_TO_BOOL_MAP[str(value).lower()]\n    except KeyError as exc:\n        raise ValueError(\n            f\"Invalid bool value: '{value}'.\\n\"\n            f\"For `True`, must be one of: {[key for key, val in STR_TO_BOOL_MAP.items() if val]}\\n\"\n            f\"For `False`, must be one of: {[key for key, val in STR_TO_BOOL_MAP.items() if not val]}\"\n        ) from exc\n</code></pre>"},{"location":"code/checkers/","title":"Checkers","text":""},{"location":"code/checkers/#toolbox_python.checkers","title":"toolbox_python.checkers","text":""},{"location":"code/checkers/#is_-functions","title":"<code>is_*()</code> functions","text":""},{"location":"code/checkers/#toolbox_python.checkers.is_value_of_type","title":"is_value_of_type","text":"<pre><code>is_value_of_type(\n    value: Any, check_type: Union[type, tuple[type, ...]]\n) -&gt; bool\n</code></pre> <p>Summary</p> <p>Check if a given value is of a specified type or types.</p> Details <p>This function is used to verify if a given value matches a specified type or any of the types in a tuple of types.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to check.</p> required <code>check_type</code> <code>Union[type, tuple[type]]</code> <p>The type or tuple of types to check against.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the value is of the specified type or one of the specified types; <code>False</code> otherwise.</p> Examples <p>Check if a value is of a specific type:</p> Prepare data<pre><code>&gt;&gt;&gt; value = 42\n&gt;&gt;&gt; check_type = int\n</code></pre> <p>Example 1: Check if value is of type `#!py int`<pre><code>&gt;&gt;&gt; is_value_of_type(value, check_type)\n</code></pre> Output<pre><code>True\n</code></pre> <p>Conclusion: The value is of type <code>int</code>.</p> <p>Example 2: Check if value is of type `#!py str`<pre><code>&gt;&gt;&gt; is_value_of_type(value, str)\n</code></pre> Output<pre><code>False\n</code></pre> <p>Conclusion: The value is not of type <code>str</code>.</p> See Also <ul> <li><code>is_value_of_type()</code></li> <li><code>is_type()</code></li> </ul> Source code in <code>src/toolbox_python/checkers.py</code> <pre><code>def is_value_of_type(\n    value: Any,\n    check_type: Union[type, tuple[type, ...]],\n) -&gt; bool:\n    \"\"\"\n    !!! summary \"Summary\"\n        Check if a given value is of a specified type or types.\n\n    ???+ info \"Details\"\n        This function is used to verify if a given value matches a specified type or any of the types in a tuple of types.\n\n    Params:\n        value (Any):\n            The value to check.\n        check_type (Union[type, tuple[type]]):\n            The type or tuple of types to check against.\n\n    Returns:\n        (bool):\n            `#!py True` if the value is of the specified type or one of the specified types; `#!py False` otherwise.\n\n    ???+ example \"Examples\"\n\n        Check if a value is of a specific type:\n\n        ```{.py .python linenums=\"1\" title=\"Prepare data\"}\n        &gt;&gt;&gt; value = 42\n        &gt;&gt;&gt; check_type = int\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Check if value is of type `#!py int`\"}\n        &gt;&gt;&gt; is_value_of_type(value, check_type)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        True\n        ```\n        !!! success \"Conclusion: The value is of type `#!py int`.\"\n\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Check if value is of type `#!py str`\"}\n        &gt;&gt;&gt; is_value_of_type(value, str)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        False\n        ```\n        !!! failure \"Conclusion: The value is not of type `#!py str`.\"\n\n        &lt;/div&gt;\n\n    ??? tip \"See Also\"\n        - [`is_value_of_type()`][toolbox_python.checkers.is_value_of_type]\n        - [`is_type()`][toolbox_python.checkers.is_type]\n    \"\"\"\n    return isinstance(value, check_type)\n</code></pre>"},{"location":"code/checkers/#toolbox_python.checkers.is_all_values_of_type","title":"is_all_values_of_type","text":"<pre><code>is_all_values_of_type(\n    values: any_collection,\n    check_type: Union[type, tuple[type, ...]],\n) -&gt; bool\n</code></pre> <p>Summary</p> <p>Check if all values in an iterable are of a specified type or types.</p> Details <p>This function is used to verify if all values in a given iterable match a specified type or any of the types in a tuple of types.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>any_collection</code> <p>The iterable containing values to check.</p> required <code>check_type</code> <code>Union[type, tuple[type]]</code> <p>The type or tuple of types to check against.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if all values are of the specified type or one of the specified types; <code>False</code> otherwise.</p> Examples <p>Check if all values in an iterable are of a specific type:</p> Prepare data<pre><code>&gt;&gt;&gt; values = [1, 2, 3]\n&gt;&gt;&gt; check_type = int\n</code></pre> <p>Example 1: Check if all values are of type `#!py int`<pre><code>&gt;&gt;&gt; is_all_values_of_type(values, check_type)\n</code></pre> Output<pre><code>True\n</code></pre> <p>Conclusion: All values are of type <code>int</code>.</p> <p>Example 2: Check if all values are of type `#!py str`<pre><code>&gt;&gt;&gt; is_all_values_of_type(values, str)\n</code></pre> Output<pre><code>False\n</code></pre> <p>Conclusion: Not all values are of type <code>str</code>.</p> See Also <ul> <li><code>is_value_of_type()</code></li> <li><code>is_all_values_of_type()</code></li> <li><code>is_type()</code></li> <li><code>is_all_type()</code></li> </ul> Source code in <code>src/toolbox_python/checkers.py</code> <pre><code>def is_all_values_of_type(\n    values: any_collection,\n    check_type: Union[type, tuple[type, ...]],\n) -&gt; bool:\n    \"\"\"\n    !!! summary \"Summary\"\n        Check if all values in an iterable are of a specified type or types.\n\n    ???+ info \"Details\"\n        This function is used to verify if all values in a given iterable match a specified type or any of the types in a tuple of types.\n\n    Params:\n        values (any_collection):\n            The iterable containing values to check.\n        check_type (Union[type, tuple[type]]):\n            The type or tuple of types to check against.\n\n    Returns:\n        (bool):\n            `#!py True` if all values are of the specified type or one of the specified types; `#!py False` otherwise.\n\n    ???+ example \"Examples\"\n\n        Check if all values in an iterable are of a specific type:\n\n        ```{.py .python linenums=\"1\" title=\"Prepare data\"}\n        &gt;&gt;&gt; values = [1, 2, 3]\n        &gt;&gt;&gt; check_type = int\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Check if all values are of type `#!py int`\"}\n        &gt;&gt;&gt; is_all_values_of_type(values, check_type)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        True\n        ```\n        !!! success \"Conclusion: All values are of type `#!py int`.\"\n\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Check if all values are of type `#!py str`\"}\n        &gt;&gt;&gt; is_all_values_of_type(values, str)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        False\n        ```\n        !!! failure \"Conclusion: Not all values are of type `#!py str`.\"\n\n        &lt;/div&gt;\n\n    ??? tip \"See Also\"\n        - [`is_value_of_type()`][toolbox_python.checkers.is_value_of_type]\n        - [`is_all_values_of_type()`][toolbox_python.checkers.is_all_values_of_type]\n        - [`is_type()`][toolbox_python.checkers.is_type]\n        - [`is_all_type()`][toolbox_python.checkers.is_all_type]\n    \"\"\"\n    return all(isinstance(value, check_type) for value in values)\n</code></pre>"},{"location":"code/checkers/#toolbox_python.checkers.is_any_values_of_type","title":"is_any_values_of_type","text":"<pre><code>is_any_values_of_type(\n    values: any_collection,\n    check_type: Union[type, tuple[type, ...]],\n) -&gt; bool\n</code></pre> <p>Summary</p> <p>Check if any value in an iterable is of a specified type or types.</p> Details <p>This function is used to verify if any value in a given iterable matches a specified type or any of the types in a tuple of types.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>any_collection</code> <p>The iterable containing values to check.</p> required <code>check_type</code> <code>Union[type, tuple[type]]</code> <p>The type or tuple of types to check against.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if any value is of the specified type or one of the specified types; <code>False</code> otherwise.</p> Examples <p>Check if any value in an iterable is of a specific type:</p> Prepare data<pre><code>&gt;&gt;&gt; values = [1, 'a', 3.0]\n&gt;&gt;&gt; check_type = str\n</code></pre> <p>Example 1: Check if any value is of type `#!py str`<pre><code>&gt;&gt;&gt; is_any_values_of_type(values, check_type)\n</code></pre> Output<pre><code>True\n</code></pre> <p>Conclusion: At least one value is of type <code>str</code>.</p> <p>Example 2: Check if any value is of type `#!py dict`<pre><code>&gt;&gt;&gt; is_any_values_of_type(values, dict)\n</code></pre> Output<pre><code>False\n</code></pre> <p>Conclusion: No values are of type <code>dict</code>.</p> See Also <ul> <li><code>is_value_of_type()</code></li> <li><code>is_any_values_of_type()</code></li> <li><code>is_type()</code></li> <li><code>is_any_type()</code></li> </ul> Source code in <code>src/toolbox_python/checkers.py</code> <pre><code>def is_any_values_of_type(\n    values: any_collection,\n    check_type: Union[type, tuple[type, ...]],\n) -&gt; bool:\n    \"\"\"\n    !!! summary \"Summary\"\n        Check if any value in an iterable is of a specified type or types.\n\n    ???+ info \"Details\"\n        This function is used to verify if any value in a given iterable matches a specified type or any of the types in a tuple of types.\n\n    Params:\n        values (any_collection):\n            The iterable containing values to check.\n        check_type (Union[type, tuple[type]]):\n            The type or tuple of types to check against.\n\n    Returns:\n        (bool):\n            `#!py True` if any value is of the specified type or one of the specified types; `#!py False` otherwise.\n\n    ???+ example \"Examples\"\n\n        Check if any value in an iterable is of a specific type:\n\n        ```{.py .python linenums=\"1\" title=\"Prepare data\"}\n        &gt;&gt;&gt; values = [1, 'a', 3.0]\n        &gt;&gt;&gt; check_type = str\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Check if any value is of type `#!py str`\"}\n        &gt;&gt;&gt; is_any_values_of_type(values, check_type)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        True\n        ```\n        !!! success \"Conclusion: At least one value is of type `#!py str`.\"\n\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Check if any value is of type `#!py dict`\"}\n        &gt;&gt;&gt; is_any_values_of_type(values, dict)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        False\n        ```\n        !!! failure \"Conclusion: No values are of type `#!py dict`.\"\n\n        &lt;/div&gt;\n\n    ??? tip \"See Also\"\n        - [`is_value_of_type()`][toolbox_python.checkers.is_value_of_type]\n        - [`is_any_values_of_type()`][toolbox_python.checkers.is_any_values_of_type]\n        - [`is_type()`][toolbox_python.checkers.is_type]\n        - [`is_any_type()`][toolbox_python.checkers.is_any_type]\n    \"\"\"\n    return any(isinstance(value, check_type) for value in values)\n</code></pre>"},{"location":"code/checkers/#toolbox_python.checkers.is_value_in_iterable","title":"is_value_in_iterable","text":"<pre><code>is_value_in_iterable(\n    value: scalar, iterable: any_collection\n) -&gt; bool\n</code></pre> <p>Summary</p> <p>Check if a given value is present in an iterable.</p> Details <p>This function is used to verify if a given value exists within an iterable such as a list, tuple, or set.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>scalar</code> <p>The value to check.</p> required <code>iterable</code> <code>any_collection</code> <p>The iterable to check within.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the value is found in the iterable; <code>False</code> otherwise.</p> Examples <p>Check if a value is in an iterable:</p> Prepare data<pre><code>&gt;&gt;&gt; value = 2\n&gt;&gt;&gt; iterable = [1, 2, 3]\n</code></pre> <p>Example 1: Check if value is in the iterable<pre><code>&gt;&gt;&gt; is_value_in_iterable(value, iterable)\n</code></pre> Output<pre><code>True\n</code></pre> <p>Conclusion: The value is in the iterable.</p> <p>Example 2: Check if value is not in the iterable<pre><code>&gt;&gt;&gt; is_value_in_iterable(4, iterable)\n</code></pre> Output<pre><code>False\n</code></pre> <p>Conclusion: The value is not in the iterable.</p> See Also <ul> <li><code>is_value_in_iterable()</code></li> <li><code>is_in()</code></li> </ul> Source code in <code>src/toolbox_python/checkers.py</code> <pre><code>def is_value_in_iterable(\n    value: scalar,\n    iterable: any_collection,\n) -&gt; bool:\n    \"\"\"\n    !!! summary \"Summary\"\n        Check if a given value is present in an iterable.\n\n    ???+ info \"Details\"\n        This function is used to verify if a given value exists within an iterable such as a list, tuple, or set.\n\n    Params:\n        value (scalar):\n            The value to check.\n        iterable (any_collection):\n            The iterable to check within.\n\n    Returns:\n        (bool):\n            `#!py True` if the value is found in the iterable; `#!py False` otherwise.\n\n    ???+ example \"Examples\"\n\n        Check if a value is in an iterable:\n\n        ```{.py .python linenums=\"1\" title=\"Prepare data\"}\n        &gt;&gt;&gt; value = 2\n        &gt;&gt;&gt; iterable = [1, 2, 3]\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Check if value is in the iterable\"}\n        &gt;&gt;&gt; is_value_in_iterable(value, iterable)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        True\n        ```\n        !!! success \"Conclusion: The value is in the iterable.\"\n\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Check if value is not in the iterable\"}\n        &gt;&gt;&gt; is_value_in_iterable(4, iterable)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        False\n        ```\n        !!! failure \"Conclusion: The value is not in the iterable.\"\n\n        &lt;/div&gt;\n\n    ??? tip \"See Also\"\n        - [`is_value_in_iterable()`][toolbox_python.checkers.is_value_in_iterable]\n        - [`is_in()`][toolbox_python.checkers.is_in]\n    \"\"\"\n    return value in iterable\n</code></pre>"},{"location":"code/checkers/#toolbox_python.checkers.is_all_values_in_iterable","title":"is_all_values_in_iterable","text":"<pre><code>is_all_values_in_iterable(\n    values: any_collection, iterable: any_collection\n) -&gt; bool\n</code></pre> <p>Summary</p> <p>Check if all values in an iterable are present in another iterable.</p> Details <p>This function is used to verify if all values in a given iterable exist within another iterable.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>any_collection</code> <p>The iterable containing values to check.</p> required <code>iterable</code> <code>any_collection</code> <p>The iterable to check within.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if all values are found in the iterable; <code>False</code> otherwise.</p> Examples <p>Check if all values in an iterable are present in another iterable:</p> Prepare data<pre><code>&gt;&gt;&gt; values = [1, 2]\n&gt;&gt;&gt; iterable = [1, 2, 3]\n</code></pre> <p>Example 1: Check if all values are in the iterable<pre><code>&gt;&gt;&gt; is_all_values_in_iterable(values, iterable)\n</code></pre> Output<pre><code>True\n</code></pre> <p>Conclusion: All values are in the iterable.</p> <p>Example 2: Check if all values are not in the iterable<pre><code>&gt;&gt;&gt; is_all_values_in_iterable([1, 4], iterable)\n</code></pre> Output<pre><code>False\n</code></pre> <p>Conclusion: Not all values are in the iterable.</p> See Also <ul> <li><code>is_value_in_iterable()</code></li> <li><code>is_all_values_of_type()</code></li> <li><code>is_in()</code></li> <li><code>is_all_in()</code></li> </ul> Source code in <code>src/toolbox_python/checkers.py</code> <pre><code>def is_all_values_in_iterable(\n    values: any_collection,\n    iterable: any_collection,\n) -&gt; bool:\n    \"\"\"\n    !!! summary \"Summary\"\n        Check if all values in an iterable are present in another iterable.\n\n    ???+ info \"Details\"\n        This function is used to verify if all values in a given iterable exist within another iterable.\n\n    Params:\n        values (any_collection):\n            The iterable containing values to check.\n        iterable (any_collection):\n            The iterable to check within.\n\n    Returns:\n        (bool):\n            `#!py True` if all values are found in the iterable; `#!py False` otherwise.\n\n    ???+ example \"Examples\"\n\n        Check if all values in an iterable are present in another iterable:\n\n        ```{.py .python linenums=\"1\" title=\"Prepare data\"}\n        &gt;&gt;&gt; values = [1, 2]\n        &gt;&gt;&gt; iterable = [1, 2, 3]\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Check if all values are in the iterable\"}\n        &gt;&gt;&gt; is_all_values_in_iterable(values, iterable)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        True\n        ```\n        !!! success \"Conclusion: All values are in the iterable.\"\n\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Check if all values are not in the iterable\"}\n        &gt;&gt;&gt; is_all_values_in_iterable([1, 4], iterable)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        False\n        ```\n        !!! failure \"Conclusion: Not all values are in the iterable.\"\n\n        &lt;/div&gt;\n\n    ??? tip \"See Also\"\n        - [`is_value_in_iterable()`][toolbox_python.checkers.is_value_in_iterable]\n        - [`is_all_values_of_type()`][toolbox_python.checkers.is_all_values_of_type]\n        - [`is_in()`][toolbox_python.checkers.is_in]\n        - [`is_all_in()`][toolbox_python.checkers.is_all_in]\n    \"\"\"\n    return all(value in iterable for value in values)\n</code></pre>"},{"location":"code/checkers/#toolbox_python.checkers.is_any_values_in_iterable","title":"is_any_values_in_iterable","text":"<pre><code>is_any_values_in_iterable(\n    values: any_collection, iterable: any_collection\n) -&gt; bool\n</code></pre> <p>Summary</p> <p>Check if any value in an iterable is present in another iterable.</p> Details <p>This function is used to verify if any value in a given iterable exists within another iterable.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>any_collection</code> <p>The iterable containing values to check.</p> required <code>iterable</code> <code>any_collection</code> <p>The iterable to check within.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if any value is found in the iterable; <code>False</code> otherwise.</p> Examples <p>Check if any value in an iterable is present in another iterable:</p> Prepare data<pre><code>&gt;&gt;&gt; values = [1, 4]\n&gt;&gt;&gt; iterable = [1, 2, 3]\n</code></pre> <p>Example 1: Check if any value is in the iterable<pre><code>&gt;&gt;&gt; is_any_values_in_iterable(values, iterable)\n</code></pre> Output<pre><code>True\n</code></pre> <p>Conclusion: At least one value is in the iterable.</p> <p>Example 2: Check if any value is not in the iterable<pre><code>&gt;&gt;&gt; is_any_values_in_iterable([4, 5], iterable)\n</code></pre> Output<pre><code>False\n</code></pre> <p>Conclusion: None of the values are in the iterable.</p> See Also <ul> <li><code>is_value_in_iterable()</code></li> <li><code>is_any_values_of_type()</code></li> <li><code>is_in()</code></li> <li><code>is_any_in()</code></li> </ul> Source code in <code>src/toolbox_python/checkers.py</code> <pre><code>def is_any_values_in_iterable(\n    values: any_collection,\n    iterable: any_collection,\n) -&gt; bool:\n    \"\"\"\n    !!! summary \"Summary\"\n        Check if any value in an iterable is present in another iterable.\n\n    ???+ info \"Details\"\n        This function is used to verify if any value in a given iterable exists within another iterable.\n\n    Params:\n        values (any_collection):\n            The iterable containing values to check.\n        iterable (any_collection):\n            The iterable to check within.\n\n    Returns:\n        (bool):\n            `#!py True` if any value is found in the iterable; `#!py False` otherwise.\n\n    ???+ example \"Examples\"\n\n        Check if any value in an iterable is present in another iterable:\n\n        ```{.py .python linenums=\"1\" title=\"Prepare data\"}\n        &gt;&gt;&gt; values = [1, 4]\n        &gt;&gt;&gt; iterable = [1, 2, 3]\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Check if any value is in the iterable\"}\n        &gt;&gt;&gt; is_any_values_in_iterable(values, iterable)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        True\n        ```\n        !!! success \"Conclusion: At least one value is in the iterable.\"\n\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Check if any value is not in the iterable\"}\n        &gt;&gt;&gt; is_any_values_in_iterable([4, 5], iterable)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        False\n        ```\n        !!! failure \"Conclusion: None of the values are in the iterable.\"\n\n        &lt;/div&gt;\n\n    ??? tip \"See Also\"\n        - [`is_value_in_iterable()`][toolbox_python.checkers.is_value_in_iterable]\n        - [`is_any_values_of_type()`][toolbox_python.checkers.is_any_values_of_type]\n        - [`is_in()`][toolbox_python.checkers.is_in]\n        - [`is_any_in()`][toolbox_python.checkers.is_any_in]\n    \"\"\"\n    return any(value in iterable for value in values)\n</code></pre>"},{"location":"code/checkers/#is_-function-aliases","title":"<code>is_*()</code> function aliases","text":""},{"location":"code/checkers/#toolbox_python.checkers.is_type","title":"is_type  <code>module-attribute</code>","text":"<pre><code>is_type = is_value_of_type\n</code></pre>"},{"location":"code/checkers/#toolbox_python.checkers.is_all_type","title":"is_all_type  <code>module-attribute</code>","text":"<pre><code>is_all_type = is_all_values_of_type\n</code></pre>"},{"location":"code/checkers/#toolbox_python.checkers.is_any_type","title":"is_any_type  <code>module-attribute</code>","text":"<pre><code>is_any_type = is_any_values_of_type\n</code></pre>"},{"location":"code/checkers/#toolbox_python.checkers.is_in","title":"is_in  <code>module-attribute</code>","text":"<pre><code>is_in = is_value_in_iterable\n</code></pre>"},{"location":"code/checkers/#toolbox_python.checkers.is_any_in","title":"is_any_in  <code>module-attribute</code>","text":"<pre><code>is_any_in = is_any_values_in_iterable\n</code></pre>"},{"location":"code/checkers/#toolbox_python.checkers.is_all_in","title":"is_all_in  <code>module-attribute</code>","text":"<pre><code>is_all_in = is_all_values_in_iterable\n</code></pre>"},{"location":"code/checkers/#assert_-functions","title":"<code>assert_*()</code> functions","text":""},{"location":"code/checkers/#toolbox_python.checkers.assert_value_of_type","title":"assert_value_of_type","text":"<pre><code>assert_value_of_type(\n    value: Any, check_type: Union[type, tuple[type, ...]]\n) -&gt; None\n</code></pre> <p>Summary</p> <p>Assert that a given value is of a specified type or types.</p> Details <p>This function is used to assert that a given value matches a specified type or any of the types in a tuple of types. If the value does not match the specified type(s), a <code>TypeError</code> is raised.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to check.</p> required <code>check_type</code> <code>Union[type, tuple[type]]</code> <p>The type or tuple of types to check against.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the value is not of the specified type or one of the specified types.</p> Examples <p>Assert that a value is of a specific type:</p> Prepare data<pre><code>&gt;&gt;&gt; value = 42\n&gt;&gt;&gt; check_type = int\n</code></pre> <p>Example 1: Assert that value is of type int<pre><code>&gt;&gt;&gt; assert_value_of_type(value, check_type)\n</code></pre> Output<pre><code>(no output, no exception raised)\n</code></pre> <p>Conclusion: The value is of type <code>int</code>.</p> <p>Example 2: Assert that value is of type str<pre><code>&gt;&gt;&gt; assert_value_of_type(value, str)\n</code></pre> Output<pre><code>Traceback (most recent call last):\n  ...\nTypeError: Value '42' is not correct type: 'int'. Must be: 'str'\n</code></pre> <p>Conclusion: The value is not of type <code>str</code>.</p> <p>Example 3: Assert that value is of type int or float<pre><code>&gt;&gt;&gt; assert_value_of_type(value, (int, float))\n</code></pre> Output<pre><code>(no output, no exception raised)\n</code></pre> <p>Conclusion: The value is of type <code>int</code> or <code>float</code>.</p> <p>Example 4: Assert that value is of type str or dict<pre><code>&gt;&gt;&gt; assert_value_of_type(value, (str, dict))\n</code></pre> Output<pre><code>Traceback (most recent call last):\n  ...\nTypeError: Value '42' is not correct type: 'int'. Must be: 'str' or 'dict'.\n</code></pre> <p>Conclusion: The value is not of type <code>str</code> or <code>dict</code>.</p> See Also <ul> <li><code>is_value_of_type()</code></li> <li><code>is_type()</code></li> </ul> Source code in <code>src/toolbox_python/checkers.py</code> <pre><code>def assert_value_of_type(\n    value: Any,\n    check_type: Union[type, tuple[type, ...]],\n) -&gt; None:\n    \"\"\"\n    !!! summary \"Summary\"\n        Assert that a given value is of a specified type or types.\n\n    ???+ info \"Details\"\n        This function is used to assert that a given value matches a specified type or any of the types in a tuple of types. If the value does not match the specified type(s), a `#!py TypeError` is raised.\n\n    Params:\n        value (Any):\n            The value to check.\n        check_type (Union[type, tuple[type]]):\n            The type or tuple of types to check against.\n\n    Raises:\n        (TypeError):\n            If the value is not of the specified type or one of the specified types.\n\n    ???+ example \"Examples\"\n\n        Assert that a value is of a specific type:\n\n        ```{.py .python linenums=\"1\" title=\"Prepare data\"}\n        &gt;&gt;&gt; value = 42\n        &gt;&gt;&gt; check_type = int\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Assert that value is of type int\"}\n        &gt;&gt;&gt; assert_value_of_type(value, check_type)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        (no output, no exception raised)\n        ```\n        !!! success \"Conclusion: The value is of type `#!py int`.\"\n\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Assert that value is of type str\"}\n        &gt;&gt;&gt; assert_value_of_type(value, str)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        Traceback (most recent call last):\n          ...\n        TypeError: Value '42' is not correct type: 'int'. Must be: 'str'\n        ```\n        !!! failure \"Conclusion: The value is not of type `#!py str`.\"\n\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 3: Assert that value is of type int or float\"}\n        &gt;&gt;&gt; assert_value_of_type(value, (int, float))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        (no output, no exception raised)\n        ```\n        !!! success \"Conclusion: The value is of type `#!py int` or `#!py float`.\"\n\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 4: Assert that value is of type str or dict\"}\n        &gt;&gt;&gt; assert_value_of_type(value, (str, dict))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        Traceback (most recent call last):\n          ...\n        TypeError: Value '42' is not correct type: 'int'. Must be: 'str' or 'dict'.\n        ```\n        !!! failure \"Conclusion: The value is not of type `#!py str` or `#!py dict`.\"\n\n        &lt;/div&gt;\n\n    ??? tip \"See Also\"\n        - [`is_value_of_type()`][toolbox_python.checkers.is_value_of_type]\n        - [`is_type()`][toolbox_python.checkers.is_type]\n    \"\"\"\n    if not is_type(value=value, check_type=check_type):\n        msg: str = f\"Value '{value}' is not correct type: '{type(value).__name__}'. \"\n        if isinstance(check_type, type):\n            msg += f\"Must be: '{check_type.__name__}'.\"\n        else:\n            msg += f\"Must be: '{' or '.join([typ.__name__ for typ in check_type])}'.\"\n        raise TypeError(msg)\n</code></pre>"},{"location":"code/checkers/#toolbox_python.checkers.assert_all_values_of_type","title":"assert_all_values_of_type","text":"<pre><code>assert_all_values_of_type(\n    values: any_collection,\n    check_type: Union[type, tuple[type, ...]],\n) -&gt; None\n</code></pre> <p>Summary</p> <p>Assert that all values in an iterable are of a specified type or types.</p> Details <p>This function is used to assert that all values in a given iterable match a specified type or any of the types in a tuple of types. If any value does not match the specified type(s), a <code>TypeError</code> is raised.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>any_collection</code> <p>The iterable containing values to check.</p> required <code>check_type</code> <code>Union[type, tuple[type]]</code> <p>The type or tuple of types to check against.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If any value is not of the specified type or one of the specified types.</p> Examples <p>Assert that all values in an iterable are of a specific type:</p> Prepare data<pre><code>&gt;&gt;&gt; values = [1, 2, 3]\n&gt;&gt;&gt; check_type = int\n</code></pre> <p>Example 1: Assert that all values are of type int<pre><code>&gt;&gt;&gt; assert_all_values_of_type(values, check_type)\n</code></pre> Output<pre><code>(no output, no exception raised)\n</code></pre> <p>Conclusion: All values are of type <code>int</code>.</p> <p>Example 2: Assert that all values are of type str<pre><code>&gt;&gt;&gt; assert_all_values_of_type(values, str)\n</code></pre> Output<pre><code>Traceback (most recent call last):\n    ...\nTypeError: Some elements [1, 2, 3] have the incorrect type ['int', 'int', 'int']. Must be 'str'\n</code></pre> <p>Conclusion: Not all values are of type <code>str</code>.</p> <p>Example 3: Assert that all values are of type int or float<pre><code>&gt;&gt;&gt; assert_all_values_of_type(values, (int, float))\n</code></pre> Output<pre><code>(no output, no exception raised)\n</code></pre> <p>Conclusion: All values are of type <code>int</code> or <code>float</code>.</p> <p>Example 4: Assert that all values are of type str or dict<pre><code>&gt;&gt;&gt; assert_all_values_of_type(values, (str, dict))\n</code></pre> Output<pre><code>Traceback (most recent call last):\n    ...\nTypeError: Some elements [1, 2, 3] have the incorrect type ['int', 'int', 'int']. Must be: 'str' or 'dict'\n</code></pre> <p>Conclusion: Not all values are of type <code>str</code> or <code>dict</code>.</p> See Also <ul> <li><code>is_value_of_type()</code></li> <li><code>is_all_values_of_type()</code></li> <li><code>is_type()</code></li> <li><code>is_all_type()</code></li> </ul> Source code in <code>src/toolbox_python/checkers.py</code> <pre><code>def assert_all_values_of_type(\n    values: any_collection,\n    check_type: Union[type, tuple[type, ...]],\n) -&gt; None:\n    \"\"\"\n    !!! summary \"Summary\"\n        Assert that all values in an iterable are of a specified type or types.\n\n    ???+ info \"Details\"\n        This function is used to assert that all values in a given iterable match a specified type or any of the types in a tuple of types. If any value does not match the specified type(s), a `#!py TypeError` is raised.\n\n    Params:\n        values (any_collection):\n            The iterable containing values to check.\n        check_type (Union[type, tuple[type]]):\n            The type or tuple of types to check against.\n\n    Raises:\n        (TypeError):\n            If any value is not of the specified type or one of the specified types.\n\n    ???+ example \"Examples\"\n\n        Assert that all values in an iterable are of a specific type:\n\n        ```{.py .python linenums=\"1\" title=\"Prepare data\"}\n        &gt;&gt;&gt; values = [1, 2, 3]\n        &gt;&gt;&gt; check_type = int\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Assert that all values are of type int\"}\n        &gt;&gt;&gt; assert_all_values_of_type(values, check_type)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        (no output, no exception raised)\n        ```\n        !!! success \"Conclusion: All values are of type `#!py int`.\"\n\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Assert that all values are of type str\"}\n        &gt;&gt;&gt; assert_all_values_of_type(values, str)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        Traceback (most recent call last):\n            ...\n        TypeError: Some elements [1, 2, 3] have the incorrect type ['int', 'int', 'int']. Must be 'str'\n        ```\n        !!! failure \"Conclusion: Not all values are of type `#!py str`.\"\n\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 3: Assert that all values are of type int or float\"}\n        &gt;&gt;&gt; assert_all_values_of_type(values, (int, float))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        (no output, no exception raised)\n        ```\n        !!! success \"Conclusion: All values are of type `#!py int` or `#!py float`.\"\n\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 4: Assert that all values are of type str or dict\"}\n        &gt;&gt;&gt; assert_all_values_of_type(values, (str, dict))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        Traceback (most recent call last):\n            ...\n        TypeError: Some elements [1, 2, 3] have the incorrect type ['int', 'int', 'int']. Must be: 'str' or 'dict'\n        ```\n        !!! failure \"Conclusion: Not all values are of type `#!py str` or `#!py dict`.\"\n\n        &lt;/div&gt;\n\n    ??? tip \"See Also\"\n        - [`is_value_of_type()`][toolbox_python.checkers.is_value_of_type]\n        - [`is_all_values_of_type()`][toolbox_python.checkers.is_all_values_of_type]\n        - [`is_type()`][toolbox_python.checkers.is_type]\n        - [`is_all_type()`][toolbox_python.checkers.is_all_type]\n    \"\"\"\n    if not is_all_type(values=values, check_type=check_type):\n        invalid_values = [value for value in values if not is_type(value, check_type)]\n        invalid_types = [\n            f\"'{type(value).__name__}'\"\n            for value in values\n            if not is_type(value, check_type)\n        ]\n        msg: str = (\n            f\"Some elements {invalid_values} have the incorrect type {invalid_types}. \"\n        )\n        if isinstance(check_type, type):\n            msg += f\"Must be '{check_type}'\"\n        else:\n            types: list[str] = [f\"'{typ.__name__}'\" for typ in check_type]\n            msg += f\"Must be: {' or '.join(types)}\"\n        raise TypeError(msg)\n</code></pre>"},{"location":"code/checkers/#toolbox_python.checkers.assert_any_values_of_type","title":"assert_any_values_of_type","text":"<pre><code>assert_any_values_of_type(\n    values: any_collection,\n    check_type: Union[type, tuple[type, ...]],\n) -&gt; None\n</code></pre> <p>Summary</p> <p>Assert that any value in an iterable is of a specified type or types.</p> Details <p>This function is used to assert that at least one value in a given iterable matches a specified type or any of the types in a tuple of types. If none of the values match the specified type(s), a <code>TypeError</code> is raised.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>any_collection</code> <p>The iterable containing values to check.</p> required <code>check_type</code> <code>Union[type, tuple[type]]</code> <p>The type or tuple of types to check against.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If none of the values are of the specified type or one of the specified types.</p> Examples <p>Assert that any value in an iterable is of a specific type:</p> Prepare data<pre><code>&gt;&gt;&gt; values = [1, 'a', 3.0]\n&gt;&gt;&gt; check_type = str\n</code></pre> <p>Example 1: Assert that any value is of type str<pre><code>&gt;&gt;&gt; assert_any_values_of_type(values, check_type)\n</code></pre> Output<pre><code>(no output, no exception raised)\n</code></pre> <p>Conclusion: At least one value is of type <code>str</code>.</p> <p>Example 2: Assert that any value is of type dict<pre><code>&gt;&gt;&gt; assert_any_values_of_type(values, dict)\n</code></pre> Output<pre><code>Traceback (most recent call last):\n    ...\nTypeError: None of the elements in [1, 'a', 3.0] have the correct type. Must be: 'dict'\n</code></pre> <p>Conclusion: None of the values are of type <code>dict</code>.</p> <p>Example 3: Assert that any value is of type int or float<pre><code>&gt;&gt;&gt; assert_any_values_of_type(values, (int, float))\n</code></pre> Output<pre><code>(no output, no exception raised)\n</code></pre> <p>Conclusion: At least one value is of type <code>int</code> or <code>float</code>.</p> <p>Example 4: Assert that any value is of type dict or list<pre><code>&gt;&gt;&gt; assert_any_values_of_type(values, (dict, list))\n</code></pre> Output<pre><code>Traceback (most recent call last):\n    ...\nTypeError: None of the elements in [1, 'a', 3.0] have the correct type. Must be: 'dict' or 'list'\n</code></pre> <p>Conclusion: None of the values are of type <code>dict</code> or <code>list</code>.</p> See Also <ul> <li><code>is_value_of_type()</code></li> <li><code>is_any_values_of_type()</code></li> <li><code>is_type()</code></li> <li><code>is_any_type()</code></li> </ul> Source code in <code>src/toolbox_python/checkers.py</code> <pre><code>def assert_any_values_of_type(\n    values: any_collection,\n    check_type: Union[type, tuple[type, ...]],\n) -&gt; None:\n    \"\"\"\n    !!! summary \"Summary\"\n        Assert that any value in an iterable is of a specified type or types.\n\n    ???+ info \"Details\"\n        This function is used to assert that at least one value in a given iterable matches a specified type or any of the types in a tuple of types. If none of the values match the specified type(s), a `#!py TypeError` is raised.\n\n    Params:\n        values (any_collection):\n            The iterable containing values to check.\n        check_type (Union[type, tuple[type]]):\n            The type or tuple of types to check against.\n\n    Raises:\n        (TypeError):\n            If none of the values are of the specified type or one of the specified types.\n\n    ???+ example \"Examples\"\n\n        Assert that any value in an iterable is of a specific type:\n\n        ```{.py .python linenums=\"1\" title=\"Prepare data\"}\n        &gt;&gt;&gt; values = [1, 'a', 3.0]\n        &gt;&gt;&gt; check_type = str\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Assert that any value is of type str\"}\n        &gt;&gt;&gt; assert_any_values_of_type(values, check_type)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        (no output, no exception raised)\n        ```\n        !!! success \"Conclusion: At least one value is of type `#!py str`.\"\n\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Assert that any value is of type dict\"}\n        &gt;&gt;&gt; assert_any_values_of_type(values, dict)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        Traceback (most recent call last):\n            ...\n        TypeError: None of the elements in [1, 'a', 3.0] have the correct type. Must be: 'dict'\n        ```\n        !!! failure \"Conclusion: None of the values are of type `#!py dict`.\"\n\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 3: Assert that any value is of type int or float\"}\n        &gt;&gt;&gt; assert_any_values_of_type(values, (int, float))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        (no output, no exception raised)\n        ```\n        !!! success \"Conclusion: At least one value is of type `#!py int` or `#!py float`.\"\n\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 4: Assert that any value is of type dict or list\"}\n        &gt;&gt;&gt; assert_any_values_of_type(values, (dict, list))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        Traceback (most recent call last):\n            ...\n        TypeError: None of the elements in [1, 'a', 3.0] have the correct type. Must be: 'dict' or 'list'\n        ```\n        !!! failure \"Conclusion: None of the values are of type `#!py dict` or `#!py list`.\"\n\n        &lt;/div&gt;\n\n    ??? tip \"See Also\"\n        - [`is_value_of_type()`][toolbox_python.checkers.is_value_of_type]\n        - [`is_any_values_of_type()`][toolbox_python.checkers.is_any_values_of_type]\n        - [`is_type()`][toolbox_python.checkers.is_type]\n        - [`is_any_type()`][toolbox_python.checkers.is_any_type]\n    \"\"\"\n    if not is_any_type(values=values, check_type=check_type):\n        invalid_values = [value for value in values if not is_type(value, check_type)]\n        msg: str = f\"None of the elements in {invalid_values} have the correct type. \"\n        if isinstance(check_type, type):\n            msg += f\"Must be: '{check_type.__name__}'\"\n        else:\n            types: list[str] = [f\"'{typ.__name__}'\" for typ in check_type]\n            msg += f\"Must be: {' or '.join(types)}\"\n        raise TypeError(msg)\n</code></pre>"},{"location":"code/checkers/#toolbox_python.checkers.assert_value_in_iterable","title":"assert_value_in_iterable","text":"<pre><code>assert_value_in_iterable(\n    value: scalar, iterable: any_collection\n) -&gt; None\n</code></pre> <p>Summary</p> <p>Assert that a given value is present in an iterable.</p> Details <p>This function is used to assert that a given value exists within an iterable such as a <code>list</code>, <code>tuple</code>, or <code>set</code>. If the value is not found in the iterable, a <code>LookupError</code> is raised.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>scalar</code> <p>The value to check.</p> required <code>iterable</code> <code>any_collection</code> <p>The iterable to check within.</p> required <p>Raises:</p> Type Description <code>LookupError</code> <p>If the value is not found in the iterable.</p> Examples <p>Assert that a value is in an iterable:</p> Prepare data<pre><code>&gt;&gt;&gt; value = 2\n&gt;&gt;&gt; iterable = [1, 2, 3]\n</code></pre> <p>Example 1: Assert that value is in the iterable<pre><code>&gt;&gt;&gt; assert_value_in_iterable(value, iterable)\n</code></pre> Output<pre><code>(no output, no exception raised)\n</code></pre> <p>Conclusion: The value is in the iterable.</p> <p>Example 2: Assert that value is not in the iterable<pre><code>&gt;&gt;&gt; assert_value_in_iterable(4, iterable)\n</code></pre> Output<pre><code>Traceback (most recent call last):\n    ...\nLookupError: Value '4' not found in iterable: [1, 2, 3]\n</code></pre> <p>Conclusion: The value is not in the iterable.</p> See Also <ul> <li><code>is_value_in_iterable()</code></li> <li><code>is_in()</code></li> </ul> Source code in <code>src/toolbox_python/checkers.py</code> <pre><code>def assert_value_in_iterable(\n    value: scalar,\n    iterable: any_collection,\n) -&gt; None:\n    \"\"\"\n    !!! summary \"Summary\"\n        Assert that a given value is present in an iterable.\n\n    ???+ info \"Details\"\n        This function is used to assert that a given value exists within an iterable such as a `#!py list`, `#!py tuple`, or `#!py set`. If the value is not found in the iterable, a `#!py LookupError` is raised.\n\n    Params:\n        value (scalar):\n            The value to check.\n        iterable (any_collection):\n            The iterable to check within.\n\n    Raises:\n        (LookupError):\n            If the value is not found in the iterable.\n\n    ???+ example \"Examples\"\n\n        Assert that a value is in an iterable:\n\n        ```{.py .python linenums=\"1\" title=\"Prepare data\"}\n        &gt;&gt;&gt; value = 2\n        &gt;&gt;&gt; iterable = [1, 2, 3]\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Assert that value is in the iterable\"}\n        &gt;&gt;&gt; assert_value_in_iterable(value, iterable)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        (no output, no exception raised)\n        ```\n        !!! success \"Conclusion: The value is in the iterable.\"\n\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Assert that value is not in the iterable\"}\n        &gt;&gt;&gt; assert_value_in_iterable(4, iterable)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        Traceback (most recent call last):\n            ...\n        LookupError: Value '4' not found in iterable: [1, 2, 3]\n        ```\n        !!! failure \"Conclusion: The value is not in the iterable.\"\n\n        &lt;/div&gt;\n\n    ??? tip \"See Also\"\n        - [`is_value_in_iterable()`][toolbox_python.checkers.is_value_in_iterable]\n        - [`is_in()`][toolbox_python.checkers.is_in]\n    \"\"\"\n    if not is_in(value=value, iterable=iterable):\n        raise LookupError(f\"Value '{value}' not found in iterable: {iterable}\")\n</code></pre>"},{"location":"code/checkers/#toolbox_python.checkers.assert_any_values_in_iterable","title":"assert_any_values_in_iterable","text":"<pre><code>assert_any_values_in_iterable(\n    values: any_collection, iterable: any_collection\n) -&gt; None\n</code></pre> <p>Summary</p> <p>Assert that any value in an iterable is present in another iterable.</p> Details <p>This function is used to assert that at least one value in a given iterable exists within another iterable. If none of the values are found in the iterable, a <code>LookupError</code> is raised.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>any_collection</code> <p>The iterable containing values to check.</p> required <code>iterable</code> <code>any_collection</code> <p>The iterable to check within.</p> required <p>Raises:</p> Type Description <code>LookupError</code> <p>If none of the values are found in the iterable.</p> Examples <p>Assert that any value in an iterable is present in another iterable:</p> Prepare data<pre><code>&gt;&gt;&gt; values = [1, 4]\n&gt;&gt;&gt; iterable = [1, 2, 3]\n</code></pre> <p>Example 1: Assert that any value is in the iterable<pre><code>&gt;&gt;&gt; assert_any_values_in_iterable(values, iterable)\n</code></pre> Output<pre><code>(no output, no exception raised)\n</code></pre> <p>Conclusion: At least one value is in the iterable.</p> <p>Example 2: Assert that any value is not in the iterable<pre><code>&gt;&gt;&gt; assert_any_values_in_iterable([4, 5], iterable)\n</code></pre> Output<pre><code>Traceback (most recent call last):\n    ...\nLookupError: None of the values in [4, 5] can be found in [1, 2, 3]\n</code></pre> <p>Conclusion: None of the values are in the iterable.</p> See Also <ul> <li><code>is_value_in_iterable()</code></li> <li><code>is_any_values_of_type()</code></li> <li><code>is_in()</code></li> <li><code>is_any_in()</code></li> </ul> Source code in <code>src/toolbox_python/checkers.py</code> <pre><code>def assert_any_values_in_iterable(\n    values: any_collection,\n    iterable: any_collection,\n) -&gt; None:\n    \"\"\"\n    !!! summary \"Summary\"\n        Assert that any value in an iterable is present in another iterable.\n\n    ???+ info \"Details\"\n        This function is used to assert that at least one value in a given iterable exists within another iterable. If none of the values are found in the iterable, a `#!py LookupError` is raised.\n\n    Params:\n        values (any_collection):\n            The iterable containing values to check.\n        iterable (any_collection):\n            The iterable to check within.\n\n    Raises:\n        (LookupError):\n            If none of the values are found in the iterable.\n\n    ???+ example \"Examples\"\n\n        Assert that any value in an iterable is present in another iterable:\n\n        ```{.py .python linenums=\"1\" title=\"Prepare data\"}\n        &gt;&gt;&gt; values = [1, 4]\n        &gt;&gt;&gt; iterable = [1, 2, 3]\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Assert that any value is in the iterable\"}\n        &gt;&gt;&gt; assert_any_values_in_iterable(values, iterable)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        (no output, no exception raised)\n        ```\n        !!! success \"Conclusion: At least one value is in the iterable.\"\n\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Assert that any value is not in the iterable\"}\n        &gt;&gt;&gt; assert_any_values_in_iterable([4, 5], iterable)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        Traceback (most recent call last):\n            ...\n        LookupError: None of the values in [4, 5] can be found in [1, 2, 3]\n        ```\n        !!! failure \"Conclusion: None of the values are in the iterable.\"\n\n        &lt;/div&gt;\n\n    ??? tip \"See Also\"\n        - [`is_value_in_iterable()`][toolbox_python.checkers.is_value_in_iterable]\n        - [`is_any_values_of_type()`][toolbox_python.checkers.is_any_values_of_type]\n        - [`is_in()`][toolbox_python.checkers.is_in]\n        - [`is_any_in()`][toolbox_python.checkers.is_any_in]\n    \"\"\"\n    if not is_any_in(values=values, iterable=iterable):\n        raise LookupError(f\"None of the values in {values} can be found in {iterable}\")\n</code></pre>"},{"location":"code/checkers/#toolbox_python.checkers.assert_all_values_in_iterable","title":"assert_all_values_in_iterable","text":"<pre><code>assert_all_values_in_iterable(\n    values: any_collection, iterable: any_collection\n) -&gt; None\n</code></pre> <p>Summary</p> <p>Assert that all values in an iterable are present in another iterable.</p> Details <p>This function is used to assert that all values in a given iterable exist within another iterable. If any value is not found in the iterable, a <code>LookupError</code> is raised.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>any_collection</code> <p>The iterable containing values to check.</p> required <code>iterable</code> <code>any_collection</code> <p>The iterable to check within.</p> required <p>Raises:</p> Type Description <code>LookupError</code> <p>If any value is not found in the iterable.</p> Examples <p>Assert that all values in an iterable are present in another iterable:</p> Prepare data<pre><code>&gt;&gt;&gt; values = [1, 2]\n&gt;&gt;&gt; iterable = [1, 2, 3]\n</code></pre> <p>Example 1: Assert that all values are in the iterable<pre><code>&gt;&gt;&gt; assert_all_values_in_iterable(values, iterable)\n</code></pre> Output<pre><code>(no output, no exception raised)\n</code></pre> <p>Conclusion: All values are in the iterable.</p> <p>Example 2: Assert that all values are not in the iterable<pre><code>&gt;&gt;&gt; assert_all_values_in_iterable([1, 4], iterable)\n</code></pre> Output<pre><code>Traceback (most recent call last):\n    ...\nLookupError: Some values [4] are missing from [1, 2, 3]\n</code></pre> <p>Conclusion: Not all values are in the iterable.</p> See Also <ul> <li><code>is_value_in_iterable()</code></li> <li><code>is_all_values_of_type()</code></li> <li><code>is_in()</code></li> <li><code>is_all_in()</code></li> </ul> Source code in <code>src/toolbox_python/checkers.py</code> <pre><code>def assert_all_values_in_iterable(\n    values: any_collection,\n    iterable: any_collection,\n) -&gt; None:\n    \"\"\"\n    !!! summary \"Summary\"\n        Assert that all values in an iterable are present in another iterable.\n\n    ???+ info \"Details\"\n        This function is used to assert that all values in a given iterable exist within another iterable. If any value is not found in the iterable, a `#!py LookupError` is raised.\n\n    Params:\n        values (any_collection):\n            The iterable containing values to check.\n        iterable (any_collection):\n            The iterable to check within.\n\n    Raises:\n        (LookupError):\n            If any value is not found in the iterable.\n\n    ???+ example \"Examples\"\n\n        Assert that all values in an iterable are present in another iterable:\n\n        ```{.py .python linenums=\"1\" title=\"Prepare data\"}\n        &gt;&gt;&gt; values = [1, 2]\n        &gt;&gt;&gt; iterable = [1, 2, 3]\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Assert that all values are in the iterable\"}\n        &gt;&gt;&gt; assert_all_values_in_iterable(values, iterable)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        (no output, no exception raised)\n        ```\n        !!! success \"Conclusion: All values are in the iterable.\"\n\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Assert that all values are not in the iterable\"}\n        &gt;&gt;&gt; assert_all_values_in_iterable([1, 4], iterable)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        Traceback (most recent call last):\n            ...\n        LookupError: Some values [4] are missing from [1, 2, 3]\n        ```\n        !!! failure \"Conclusion: Not all values are in the iterable.\"\n\n        &lt;/div&gt;\n\n    ??? tip \"See Also\"\n        - [`is_value_in_iterable()`][toolbox_python.checkers.is_value_in_iterable]\n        - [`is_all_values_of_type()`][toolbox_python.checkers.is_all_values_of_type]\n        - [`is_in()`][toolbox_python.checkers.is_in]\n        - [`is_all_in()`][toolbox_python.checkers.is_all_in]\n    \"\"\"\n    if not is_all_in(values=values, iterable=iterable):\n        missing_values = [value for value in values if not is_in(value, iterable)]\n        raise LookupError(f\"Some values {missing_values} are missing from {iterable}\")\n</code></pre>"},{"location":"code/checkers/#assert_-function-aliases","title":"<code>assert_*()</code> function aliases","text":""},{"location":"code/checkers/#toolbox_python.checkers.assert_type","title":"assert_type  <code>module-attribute</code>","text":"<pre><code>assert_type = assert_value_of_type\n</code></pre>"},{"location":"code/checkers/#toolbox_python.checkers.assert_all_type","title":"assert_all_type  <code>module-attribute</code>","text":"<pre><code>assert_all_type = assert_all_values_of_type\n</code></pre>"},{"location":"code/checkers/#toolbox_python.checkers.assert_any_type","title":"assert_any_type  <code>module-attribute</code>","text":"<pre><code>assert_any_type = assert_any_values_of_type\n</code></pre>"},{"location":"code/checkers/#toolbox_python.checkers.assert_in","title":"assert_in  <code>module-attribute</code>","text":"<pre><code>assert_in = assert_value_in_iterable\n</code></pre>"},{"location":"code/checkers/#toolbox_python.checkers.assert_any_in","title":"assert_any_in  <code>module-attribute</code>","text":"<pre><code>assert_any_in = assert_any_values_in_iterable\n</code></pre>"},{"location":"code/checkers/#toolbox_python.checkers.assert_all_in","title":"assert_all_in  <code>module-attribute</code>","text":"<pre><code>assert_all_in = assert_all_values_in_iterable\n</code></pre>"},{"location":"code/checkers/#_contains-functions","title":"<code>*_contains()</code> functions","text":""},{"location":"code/checkers/#toolbox_python.checkers.any_element_contains","title":"any_element_contains","text":"<pre><code>any_element_contains(\n    iterable: str_collection, check: str\n) -&gt; bool\n</code></pre> <p>Summary</p> <p>Check to see if any element in a given iterable contains a given string value.</p> <p>Note: This check is case sensitive.</p> Details <p>This function is helpful for doing a quick check to see if any element in a <code>list</code> contains a given <code>str</code> value. For example, checking if any column header contains a specific string value.</p> <p>Parameters:</p> Name Type Description Default <code>iterable</code> <code>str_collection</code> <p>The iterables to check within. Because this function uses an <code>in</code> operation to check if <code>check</code> string exists in the elements of <code>iterable</code>, therefore all elements of <code>iterable</code> must be <code>str</code> type.</p> required <code>check</code> <code>str</code> <p>The string value to check exists in any of the elements in <code>iterable</code>.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If any of the inputs parsed to the parameters of this function are not the correct type. Uses the <code>@typeguard.typechecked</code> decorator.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if at least one element in <code>iterable</code> contains <code>check</code> string; <code>False</code> if no elements contain <code>check</code>.</p> Examples <p>Check if any element in an iterable contains a specific string:</p> Prepare data<pre><code>&gt;&gt;&gt; iterable = [\"apple\", \"banana\", \"cherry\"]\n&gt;&gt;&gt; check = \"an\"\n</code></pre> <p>Example 1: Check if any element contains 'an'<pre><code>&gt;&gt;&gt; any_element_contains(iterable, check)\n</code></pre> Output<pre><code>True\n</code></pre> <p>Conclusion: At least one element contains <code>'an'</code>.</p> <p>Example 2: Check if any element contains 'xy'<pre><code>&gt;&gt;&gt; any_element_contains(iterable, \"xy\")\n</code></pre> Output<pre><code>False\n</code></pre> <p>Conclusion: No elements contain <code>'xy'</code>.</p> Source code in <code>src/toolbox_python/checkers.py</code> <pre><code>@typechecked\ndef any_element_contains(\n    iterable: str_collection,\n    check: str,\n) -&gt; bool:\n    \"\"\"\n    !!! note \"Summary\"\n        Check to see if any element in a given iterable contains a given string value.\n        !!! warning \"Note: This check _is_ case sensitive.\"\n\n    ???+ abstract \"Details\"\n        This function is helpful for doing a quick check to see if any element in a `#!py list` contains a given `#!py str` value. For example, checking if any column header contains a specific string value.\n\n    Params:\n        iterable (str_collection):\n            The iterables to check within. Because this function uses an `#!py in` operation to check if `check` string exists in the elements of `iterable`, therefore all elements of `iterable` must be `#!py str` type.\n        check (str):\n            The string value to check exists in any of the elements in `iterable`.\n\n    Raises:\n        TypeError: If any of the inputs parsed to the parameters of this function are not the correct type. Uses the [`@typeguard.typechecked`](https://typeguard.readthedocs.io/en/stable/api.html#typeguard.typechecked) decorator.\n\n    Returns:\n        (bool):\n            `#!py True` if at least one element in `iterable` contains `check` string; `#!py False` if no elements contain `check`.\n\n    ???+ example \"Examples\"\n\n        Check if any element in an iterable contains a specific string:\n\n        ```{.py .python linenums=\"1\" title=\"Prepare data\"}\n        &gt;&gt;&gt; iterable = [\"apple\", \"banana\", \"cherry\"]\n        &gt;&gt;&gt; check = \"an\"\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Check if any element contains 'an'\"}\n        &gt;&gt;&gt; any_element_contains(iterable, check)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        True\n        ```\n        !!! success \"Conclusion: At least one element contains `'an'`.\"\n\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Check if any element contains 'xy'\"}\n        &gt;&gt;&gt; any_element_contains(iterable, \"xy\")\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        False\n        ```\n        !!! failure \"Conclusion: No elements contain `'xy'`.\"\n\n        &lt;/div&gt;\n    \"\"\"\n    return any(check in elem for elem in iterable)\n</code></pre>"},{"location":"code/checkers/#toolbox_python.checkers.all_elements_contains","title":"all_elements_contains","text":"<pre><code>all_elements_contains(\n    iterable: str_collection, check: str\n) -&gt; bool\n</code></pre> <p>Summary</p> <p>Check to see if all elements in a given iterable contains a given string value.</p> <p>Note: This check is case sensitive.</p> Details <p>This function is helpful for doing a quick check to see if all element in a <code>list</code> contains a given <code>str</code> value. For example, checking if all columns in a DataFrame contains a specific string value.</p> <p>Parameters:</p> Name Type Description Default <code>iterable</code> <code>str_collection</code> <p>The iterables to check within. Because this function uses an <code>in</code> operation to check if <code>check</code> string exists in the elements of <code>iterable</code>, therefore all elements of <code>iterable</code> must be <code>str</code> type.</p> required <code>check</code> <code>str</code> <p>The string value to check exists in any of the elements in <code>iterable</code>.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If any of the inputs parsed to the parameters of this function are not the correct type. Uses the <code>@typeguard.typechecked</code> decorator.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if all elements in <code>iterable</code> contains <code>check</code> string; <code>False</code> otherwise.</p> Examples <p>Check if all elements in an iterable contain a specific string:</p> Prepare data<pre><code>&gt;&gt;&gt; iterable = [\"apple\", \"banana\", \"peach\"]\n&gt;&gt;&gt; check = \"a\"\n</code></pre> <p>Example 1: Check if all elements contain 'a'<pre><code>&gt;&gt;&gt; all_elements_contains(iterable, check)\n</code></pre> Output<pre><code>True\n</code></pre> <p>Conclusion: All elements contain <code>'a'</code>.</p> <p>Example 2: Check if all elements contain 'e'<pre><code>&gt;&gt;&gt; all_elements_contains(iterable, \"e\")\n</code></pre> Output<pre><code>False\n</code></pre> <p>Conclusion: Not all elements contain <code>'e'</code>.</p> Source code in <code>src/toolbox_python/checkers.py</code> <pre><code>@typechecked\ndef all_elements_contains(iterable: str_collection, check: str) -&gt; bool:\n    \"\"\"\n    !!! note \"Summary\"\n        Check to see if all elements in a given iterable contains a given string value.\n        !!! warning \"Note: This check _is_ case sensitive.\"\n\n    ???+ abstract \"Details\"\n        This function is helpful for doing a quick check to see if all element in a `#!py list` contains a given `#!py str` value. For example, checking if all columns in a DataFrame contains a specific string value.\n\n    Params:\n        iterable (str_collection):\n            The iterables to check within. Because this function uses an `#!py in` operation to check if `check` string exists in the elements of `iterable`, therefore all elements of `iterable` must be `#!py str` type.\n        check (str):\n            The string value to check exists in any of the elements in `iterable`.\n\n    Raises:\n        TypeError: If any of the inputs parsed to the parameters of this function are not the correct type. Uses the [`@typeguard.typechecked`](https://typeguard.readthedocs.io/en/stable/api.html#typeguard.typechecked) decorator.\n\n    Returns:\n        (bool):\n            `#!py True` if all elements in `iterable` contains `check` string; `#!py False` otherwise.\n\n    ???+ example \"Examples\"\n\n        Check if all elements in an iterable contain a specific string:\n\n        ```{.py .python linenums=\"1\" title=\"Prepare data\"}\n        &gt;&gt;&gt; iterable = [\"apple\", \"banana\", \"peach\"]\n        &gt;&gt;&gt; check = \"a\"\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Check if all elements contain 'a'\"}\n        &gt;&gt;&gt; all_elements_contains(iterable, check)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        True\n        ```\n        !!! success \"Conclusion: All elements contain `'a'`.\"\n\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Check if all elements contain 'e'\"}\n        &gt;&gt;&gt; all_elements_contains(iterable, \"e\")\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        False\n        ```\n        !!! failure \"Conclusion: Not all elements contain `'e'`.\"\n\n        &lt;/div&gt;\n    \"\"\"\n    return all(check in elem for elem in iterable)\n</code></pre>"},{"location":"code/checkers/#toolbox_python.checkers.get_elements_containing","title":"get_elements_containing","text":"<pre><code>get_elements_containing(\n    iterable: str_collection, check: str\n) -&gt; tuple[str, ...]\n</code></pre> <p>Summary</p> <p>Extract all elements in a given iterable which contains a given string value.</p> <p>Note: This check is case sensitive.</p> <p>Parameters:</p> Name Type Description Default <code>iterable</code> <code>str_collection</code> <p>The iterables to check within. Because this function uses an <code>in</code> operation to check if <code>check</code> string exists in the elements of <code>iterable</code>, therefore all elements of <code>iterable</code> must be <code>str</code> type.</p> required <code>check</code> <code>str</code> <p>The string value to check exists in any of the elements in <code>iterable</code>.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If any of the inputs parsed to the parameters of this function are not the correct type. Uses the <code>@typeguard.typechecked</code> decorator.</p> <p>Returns:</p> Type Description <code>tuple</code> <p>A <code>tuple</code> containing all the string elements from <code>iterable</code> which contains the <code>check</code> string.</p> Examples <p>Extract elements in an iterable that contain a specific string:</p> Prepare data<pre><code>&gt;&gt;&gt; iterable = [\"apple\", \"banana\", \"cherry\"]\n&gt;&gt;&gt; check = \"an\"\n</code></pre> <p>Example 1: Extract elements containing 'an'<pre><code>&gt;&gt;&gt; get_elements_containing(iterable, check)\n</code></pre> Output<pre><code>('banana',)\n</code></pre> <p>Conclusion: The element(s) containing <code>'an'</code> are extracted.</p> <p>Example 2: Extract elements containing 'xy'<pre><code>&gt;&gt;&gt; get_elements_containing(iterable, \"xy\")\n</code></pre> Output<pre><code>()\n</code></pre> <p>Conclusion: No elements contain <code>'xy'</code>.</p> Source code in <code>src/toolbox_python/checkers.py</code> <pre><code>@typechecked\ndef get_elements_containing(iterable: str_collection, check: str) -&gt; tuple[str, ...]:\n    \"\"\"\n    !!! note \"Summary\"\n        Extract all elements in a given iterable which contains a given string value.\n        !!! warning \"Note: This check _is_ case sensitive.\"\n\n    Params:\n        iterable (str_collection):\n            The iterables to check within. Because this function uses an `#!py in` operation to check if `check` string exists in the elements of `iterable`, therefore all elements of `iterable` must be `#!py str` type.\n        check (str):\n            The string value to check exists in any of the elements in `iterable`.\n\n    Raises:\n        TypeError: If any of the inputs parsed to the parameters of this function are not the correct type. Uses the [`@typeguard.typechecked`](https://typeguard.readthedocs.io/en/stable/api.html#typeguard.typechecked) decorator.\n\n    Returns:\n        (tuple):\n            A `#!py tuple` containing all the string elements from `iterable` which contains the `check` string.\n\n    ???+ example \"Examples\"\n\n        Extract elements in an iterable that contain a specific string:\n\n        ```{.py .python linenums=\"1\" title=\"Prepare data\"}\n        &gt;&gt;&gt; iterable = [\"apple\", \"banana\", \"cherry\"]\n        &gt;&gt;&gt; check = \"an\"\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Extract elements containing 'an'\"}\n        &gt;&gt;&gt; get_elements_containing(iterable, check)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        ('banana',)\n        ```\n        !!! success \"Conclusion: The element(s) containing `'an'` are extracted.\"\n\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Extract elements containing 'xy'\"}\n        &gt;&gt;&gt; get_elements_containing(iterable, \"xy\")\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Output\"}\n        ()\n        ```\n        !!! failure \"Conclusion: No elements contain `'xy'`.\"\n\n        &lt;/div&gt;\n    \"\"\"\n    return tuple(elem for elem in iterable if check in elem)\n</code></pre>"},{"location":"code/classes/","title":"Classes","text":""},{"location":"code/classes/#toolbox_python.classes","title":"toolbox_python.classes","text":"<p>Summary</p> <p>The <code>classes</code> module is designed for functions to be executed on classes; not within classes. For any methods/functions that should be added to classes, you should consider re-designing the original class, or sub-classing it to make further alterations.</p>"},{"location":"code/classes/#toolbox_python.classes.get_full_class_name","title":"get_full_class_name","text":"<pre><code>get_full_class_name(obj: Any) -&gt; str\n</code></pre> <p>Summary</p> <p>This function is designed to extract the full name of a class, including the name of the module from which it was loaded.</p> Details <p>Note, this is designed to retrieve the underlying class name of an object, not the instance name of an object. This is useful for debugging purposes, or for logging.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>The object for which you want to retrieve the full name.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The full name of the class of the object.</p> Examples Set up<pre><code>&gt;&gt;&gt; from toolbox_python.classes import get_full_class_name\n</code></pre> <p>Example 1: Check the name of a standard class<pre><code>&gt;&gt;&gt; print(get_full_class_name(str))\n</code></pre> Terminal<pre><code>str\n</code></pre> <p>Conclusion: Successful class name extraction.</p> <p>Example 2: Check the name of an imported class<pre><code>&gt;&gt;&gt; from random import Random\n&gt;&gt;&gt; print(get_full_class_name(Random))\n</code></pre> Terminal<pre><code>random.Random\n</code></pre> <p>Conclusion: Successful class name extraction.</p> Credit <p>Full credit goes to: https://stackoverflow.com/questions/18176602/how-to-get-the-name-of-an-exception-that-was-caught-in-python#answer-58045927</p> Source code in <code>src/toolbox_python/classes.py</code> <pre><code>def get_full_class_name(obj: Any) -&gt; str:\n    \"\"\"\n    !!! note \"Summary\"\n        This function is designed to extract the full name of a class, including the name of the module from which it was loaded.\n\n    ???+ abstract \"Details\"\n        Note, this is designed to retrieve the underlying _class name_ of an object, not the _instance name_ of an object. This is useful for debugging purposes, or for logging.\n\n    Params:\n        obj (Any):\n            The object for which you want to retrieve the full name.\n\n    Returns:\n        (str):\n            The full name of the class of the object.\n\n    ???+ example \"Examples\"\n\n        ```{.py .python linenums=\"1\" title=\"Set up\"}\n        &gt;&gt;&gt; from toolbox_python.classes import get_full_class_name\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Check the name of a standard class\"}\n        &gt;&gt;&gt; print(get_full_class_name(str))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        str\n        ```\n        !!! success \"Conclusion: Successful class name extraction.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Check the name of an imported class\"}\n        &gt;&gt;&gt; from random import Random\n        &gt;&gt;&gt; print(get_full_class_name(Random))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        random.Random\n        ```\n        !!! success \"Conclusion: Successful class name extraction.\"\n        &lt;/div&gt;\n\n    ??? success \"Credit\"\n        Full credit goes to:&lt;br&gt;\n        https://stackoverflow.com/questions/18176602/how-to-get-the-name-of-an-exception-that-was-caught-in-python#answer-58045927\n    \"\"\"\n    module: str = obj.__class__.__module__\n    if module is None or module == str.__class__.__module__:\n        return obj.__class__.__name__\n    return module + \".\" + obj.__class__.__name__\n</code></pre>"},{"location":"code/defaults/","title":"Defaults","text":""},{"location":"code/defaults/#toolbox_python.defaults","title":"toolbox_python.defaults","text":"<p>Summary</p> <p>The <code>defaults</code> module is used how to set and control default values for our various Python processes.</p>"},{"location":"code/defaults/#toolbox_python.defaults.Defaults","title":"toolbox_python.defaults.Defaults","text":"<p>Summary</p> <p>When we create and use Python variables, it is sometimes handy to add a default value for that variable. This class will handle that process.</p> Examples Set up data for examples<pre><code>&gt;&gt;&gt; from toolbox_python.defaults import Defaults\n&gt;&gt;&gt; defaults = Defaults()\n</code></pre> <p>Example 1: Call direct from class<pre><code>&gt;&gt;&gt; print(Defaults()(value=\"this\"))\n</code></pre> Terminal<pre><code>\"this\"\n</code></pre> <p>Conclusion: Successfully printed default value direct from class.</p> <p>Example 2: Call from instantiated class<pre><code>&gt;&gt;&gt; print(defaults(value=\"that\"))\n</code></pre> Terminal<pre><code>\"that\"\n</code></pre> <p>Conclusion: Successfully printed default value from instantiated class.</p> <p>Example 3: Cast to `bool`<pre><code>&gt;&gt;&gt; print(defaults(value=\"True\", cast=bool))\n</code></pre> Terminal<pre><code>True\n</code></pre> <p>Conclusion: Successfully casted to <code>bool</code>.</p> <p>Example 4: Cast to `int`<pre><code>&gt;&gt;&gt; print(defaults(value=\"1\", cast=int))\n</code></pre> Terminal<pre><code>1\n</code></pre> <p>Conclusion: Successfully casted to <code>int</code>.</p> <p>Example 5: Cast to `str`<pre><code>&gt;&gt;&gt; print(defaults(value=1, cast=str))\n</code></pre> Terminal<pre><code>\"1\"\n</code></pre> <p>Conclusion: Successfully casted to <code>str</code>.</p> <p>Example 6: Cast to string `'str'`<pre><code>&gt;&gt;&gt; print(defaults(value=1, cast=\"str\"))\n</code></pre> Terminal<pre><code>\"1\"\n</code></pre> <p>Conclusion: Successfully casted to <code>str</code>.</p> <p>Note: The only difference between this and the previous example is the type of the <code>cast</code> parameter. Here, it is a string representation of the type, whereas in the previous example, we parse'ed in the actual <code>str</code> class.</p> <p>Example 7: Invalid cast type<pre><code>&gt;&gt;&gt; print(defaults(value=\"next\", cast=\"bad_type\"))\n</code></pre> Terminal<pre><code>AttributeError: The value for `type` is invalid: `bad_type`.\nMust be a valid type: ['bool', 'dict', 'int', 'float', 'list', 'str', 'tuple']\n</code></pre> <p>Conclusion: Invalid cast type.</p> <p>Example 8: All blank values<pre><code>&gt;&gt;&gt; print(defaults(value=None, cast=None))\n</code></pre> Terminal<pre><code>AttributeError: Both `value` and `default` are blank: 'None', 'None'.\nIf `value` is blank, then `default` cannot be blank.\n</code></pre> <p>Conclusion: Both <code>value</code> and <code>default</code> are blank.</p> Credit <p>Inspiration from: https://github.com/henriquebastos/python-decouple/</p> Source code in <code>src/toolbox_python/defaults.py</code> <pre><code>class Defaults:\n    \"\"\"\n    !!! note \"Summary\"\n        When we create and use Python variables, it is sometimes handy to add a default value for that variable.\n        This class will handle that process.\n\n    ???+ example \"Examples\"\n\n        ```{.py .python linenums=\"1\" title=\"Set up data for examples\"}\n        &gt;&gt;&gt; from toolbox_python.defaults import Defaults\n        &gt;&gt;&gt; defaults = Defaults()\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Call direct from class\"}\n        &gt;&gt;&gt; print(Defaults()(value=\"this\"))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.txt .text title=\"Terminal\"}\n        \"this\"\n        ```\n        !!! success \"Conclusion: Successfully printed default value direct from class.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Call from instantiated class\"}\n        &gt;&gt;&gt; print(defaults(value=\"that\"))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.txt .text title=\"Terminal\"}\n        \"that\"\n        ```\n        !!! success \"Conclusion: Successfully printed default value from instantiated class.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 3: Cast to `bool`\"}\n        &gt;&gt;&gt; print(defaults(value=\"True\", cast=bool))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.txt .text title=\"Terminal\"}\n        True\n        ```\n        !!! success \"Conclusion: Successfully casted to `#!py bool`.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 4: Cast to `int`\"}\n        &gt;&gt;&gt; print(defaults(value=\"1\", cast=int))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.txt .text title=\"Terminal\"}\n        1\n        ```\n        !!! success \"Conclusion: Successfully casted to `#!py int`.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 5: Cast to `str`\"}\n        &gt;&gt;&gt; print(defaults(value=1, cast=str))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.txt .text title=\"Terminal\"}\n        \"1\"\n        ```\n        !!! success \"Conclusion: Successfully casted to `#!py str`.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 6: Cast to string `'str'`\"}\n        &gt;&gt;&gt; print(defaults(value=1, cast=\"str\"))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.txt .text title=\"Terminal\"}\n        \"1\"\n        ```\n        !!! success \"Conclusion: Successfully casted to `#!py str`.\"\n        !!! observation \"Note: The only difference between this and the previous example is the type of the `cast` parameter. Here, it is a string representation of the type, whereas in the previous example, we parse'ed in the actual `str` class.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 7: Invalid cast type\"}\n        &gt;&gt;&gt; print(defaults(value=\"next\", cast=\"bad_type\"))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.txt .text title=\"Terminal\"}\n        AttributeError: The value for `type` is invalid: `bad_type`.\n        Must be a valid type: ['bool', 'dict', 'int', 'float', 'list', 'str', 'tuple']\n        ```\n        !!! failure \"Conclusion: Invalid cast type.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 8: All blank values\"}\n        &gt;&gt;&gt; print(defaults(value=None, cast=None))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.txt .text title=\"Terminal\"}\n        AttributeError: Both `value` and `default` are blank: 'None', 'None'.\n        If `value` is blank, then `default` cannot be blank.\n        ```\n        !!! failure \"Conclusion: Both `value` and `default` are blank.\"\n        &lt;/div&gt;\n\n    ??? success \"Credit\"\n        Inspiration from:&lt;br&gt;\n        https://github.com/henriquebastos/python-decouple/\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"\n        !!! note \"Summary\"\n            Nothing is initialised when this class is instantiated.\n            Use the [`__call__()`][toolbox_python.defaults.Defaults.__call__] method instead.\n\n        ??? tip \"See Also\"\n            - [`Defaults.__call__()`][toolbox_python.defaults.Defaults.__call__]\n        \"\"\"\n        return None\n\n    def __call__(self, *args, **kwargs) -&gt; Any:\n        \"\"\"\n        !!! note \"Summary\"\n            When this class is called, it will pass through all parameters to the internal [`.get()`][toolbox_python.defaults.Defaults.get] method.\n\n        ??? tip \"See Also\"\n            - [`Defaults.get()`][toolbox_python.defaults.Defaults.get]\n        \"\"\"\n        return self.get(*args, **kwargs)\n\n    @typechecked\n    def get(\n        self,\n        value: Any,\n        default: Optional[Any] = None,\n        cast: Optional[Union[str, type]] = None,\n    ) -&gt; Any:\n        \"\"\"\n        !!! note \"Summary\"\n            From the value that is parsed in to the `value` parameter, convert it to `default` if `value` is `#!py None`, and convert it to `cast` if `cast` is not `#!py None`.\n\n        ???+ info \"Details\"\n            The detailed steps will be:\n\n            1. Validate the input (using the internal [`._validate_value_and_default()`][toolbox_python.defaults.Defaults._validate_value_and_default] &amp; [`._validate_type()`][toolbox_python.defaults.Defaults._validate_type] methods),\n            1. If `value` is `#!py None`, then assign `default` to `value`.\n            1. If `cast` is _not_ `#!py None`, then cast `value` to the data type in `cast`.\n                - Note, `cast` can be _either_ the actual type to convert to, _or_ a string representation of the type.\n            1. Return the updated/defaulted/casted `value` back to the user.\n\n        Params:\n            value (Any):\n                The value to check.\n            default (Optional[Any], optional):\n                The default value for `value`.&lt;br&gt;\n                Note, can be a `#!py None` value; however, if `value` is also `#!py None`, then `default` _cannot_ be `#!py None`.&lt;br&gt;\n                Defaults to `#!py None`.\n            cast (Optional[Union[str, type]], optional):\n                The data type to convert to.&lt;br&gt;\n                Must be one of: `#!py [\"bool\", \"dict\", \"int\", \"float\", \"list\", \"str\", \"tuple\"]`.&lt;br&gt;\n                Defaults to `#!py None`.\n\n        Returns:\n            value (Any):\n                The updated/defaulted/casted value.\n\n        ??? tip \"See Also\"\n            - [`Defaults._validate_value_and_default()`][toolbox_python.defaults.Defaults._validate_value_and_default]\n            - [`Defaults._validate_type()`][toolbox_python.defaults.Defaults._validate_type]\n        \"\"\"\n        (\n            self._validate_value_and_default(\n                value=value, default=default\n            )._validate_type(check_type=cast)\n        )\n        if value is None:\n            value = default\n        if cast is not None:\n            if (cast is bool or cast == \"bool\") and is_type(value, str):\n                value = bool(strtobool(value))\n            elif isinstance(cast, str):\n                value = eval(cast)(value)\n            else:\n                value = cast(value)\n        return value\n\n    def _validate_value_and_default(\n        self,\n        value: Optional[Any] = None,\n        default: Optional[Any] = None,\n    ) -&gt; Defaults:\n        \"\"\"\n        !!! note \"Summary\"\n            Validate to ensure that `value` and `default` are not both `#!py None`.\n\n        Params:\n            value (Optional[Any], optional):\n                The `value` to check.&lt;br&gt;\n                Defaults to `#!py None`.\n            default (Optional[Any], optional):\n                The `default` value to check.&lt;br&gt;\n                Defaults to `#!py None`.\n\n        Raises:\n            AttributeError: If both `value` and `default` are `#!py None`.\n\n        Returns:\n            self (Defaults):\n                If both `value` and `default` are not both `#!py None`, then return `self`.\n\n        ??? tip \"See Also\"\n            - [`Defaults.get()`][toolbox_python.defaults.Defaults.get]\n        \"\"\"\n        if value is None and default is None:\n            raise AttributeError(\n                f\"Both `value` and `default` are blank: '{value}', '{default}'.\\n\"\n                f\"If `value` is blank, then `default` cannot be blank.\"\n            )\n        return self\n\n    def _validate_type(\n        self,\n        check_type: Optional[Union[str, type]] = None,\n    ) -&gt; Defaults:\n        \"\"\"\n        !!! note \"Summary\"\n            Check to ensure that `check_type` is a valid Python type.&lt;br&gt;\n            Must be one of: `#!py [\"bool\", \"dict\", \"int\", \"float\", \"list\", \"str\", \"tuple\"]`.\n\n        Params:\n            check_type (Optional[Union[str, type]], optional):\n                The type to check against. Can either be an actual Python type, or it's string representation.&lt;br&gt;\n                Defaults to `#!py None`.\n\n        Raises:\n            AttributeError: If `check_type` is _both_ not `#!py None` _and_ if it is not one of the valid Python types.\n\n        Returns:\n            self (Defaults):\n                If the type is valid, return `self`.\n\n        ??? tip \"See Also\"\n            - [`Defaults.get()`][toolbox_python.defaults.Defaults.get]\n        \"\"\"\n        valid_types: list[str] = [\n            \"bool\",\n            \"dict\",\n            \"int\",\n            \"float\",\n            \"list\",\n            \"str\",\n            \"tuple\",\n        ]\n        if check_type is None:\n            return self\n        elif is_type(check_type, str):\n            retype = check_type\n        elif type(check_type).__name__ == \"type\":\n            retype = check_type.__name__  # type: ignore\n        if retype is not None and retype not in valid_types:\n            raise AttributeError(\n                f\"The value for `type` is invalid: `{retype}`.\\n\"\n                f\"Must be a valid type: {valid_types}.\"\n            )\n        return self\n</code></pre>"},{"location":"code/defaults/#toolbox_python.defaults.Defaults.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre> <p>Summary</p> <p>Nothing is initialised when this class is instantiated. Use the <code>__call__()</code> method instead.</p> See Also <ul> <li><code>Defaults.__call__()</code></li> </ul> Source code in <code>src/toolbox_python/defaults.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"\n    !!! note \"Summary\"\n        Nothing is initialised when this class is instantiated.\n        Use the [`__call__()`][toolbox_python.defaults.Defaults.__call__] method instead.\n\n    ??? tip \"See Also\"\n        - [`Defaults.__call__()`][toolbox_python.defaults.Defaults.__call__]\n    \"\"\"\n    return None\n</code></pre>"},{"location":"code/defaults/#toolbox_python.defaults.Defaults.__call__","title":"__call__","text":"<pre><code>__call__(*args, **kwargs) -&gt; Any\n</code></pre> <p>Summary</p> <p>When this class is called, it will pass through all parameters to the internal <code>.get()</code> method.</p> See Also <ul> <li><code>Defaults.get()</code></li> </ul> Source code in <code>src/toolbox_python/defaults.py</code> <pre><code>def __call__(self, *args, **kwargs) -&gt; Any:\n    \"\"\"\n    !!! note \"Summary\"\n        When this class is called, it will pass through all parameters to the internal [`.get()`][toolbox_python.defaults.Defaults.get] method.\n\n    ??? tip \"See Also\"\n        - [`Defaults.get()`][toolbox_python.defaults.Defaults.get]\n    \"\"\"\n    return self.get(*args, **kwargs)\n</code></pre>"},{"location":"code/defaults/#toolbox_python.defaults.Defaults.get","title":"get","text":"<pre><code>get(\n    value: Any,\n    default: Optional[Any] = None,\n    cast: Optional[Union[str, type]] = None,\n) -&gt; Any\n</code></pre> <p>Summary</p> <p>From the value that is parsed in to the <code>value</code> parameter, convert it to <code>default</code> if <code>value</code> is <code>None</code>, and convert it to <code>cast</code> if <code>cast</code> is not <code>None</code>.</p> Details <p>The detailed steps will be:</p> <ol> <li>Validate the input (using the internal <code>._validate_value_and_default()</code> &amp; <code>._validate_type()</code> methods),</li> <li>If <code>value</code> is <code>None</code>, then assign <code>default</code> to <code>value</code>.</li> <li>If <code>cast</code> is not <code>None</code>, then cast <code>value</code> to the data type in <code>cast</code>.<ul> <li>Note, <code>cast</code> can be either the actual type to convert to, or a string representation of the type.</li> </ul> </li> <li>Return the updated/defaulted/casted <code>value</code> back to the user.</li> </ol> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to check.</p> required <code>default</code> <code>Optional[Any]</code> <p>The default value for <code>value</code>. Note, can be a <code>None</code> value; however, if <code>value</code> is also <code>None</code>, then <code>default</code> cannot be <code>None</code>. Defaults to <code>None</code>.</p> <code>None</code> <code>cast</code> <code>Optional[Union[str, type]]</code> <p>The data type to convert to. Must be one of: <code>[\"bool\", \"dict\", \"int\", \"float\", \"list\", \"str\", \"tuple\"]</code>. Defaults to <code>None</code>.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>value</code> <code>Any</code> <p>The updated/defaulted/casted value.</p> See Also <ul> <li><code>Defaults._validate_value_and_default()</code></li> <li><code>Defaults._validate_type()</code></li> </ul> Source code in <code>src/toolbox_python/defaults.py</code> <pre><code>@typechecked\ndef get(\n    self,\n    value: Any,\n    default: Optional[Any] = None,\n    cast: Optional[Union[str, type]] = None,\n) -&gt; Any:\n    \"\"\"\n    !!! note \"Summary\"\n        From the value that is parsed in to the `value` parameter, convert it to `default` if `value` is `#!py None`, and convert it to `cast` if `cast` is not `#!py None`.\n\n    ???+ info \"Details\"\n        The detailed steps will be:\n\n        1. Validate the input (using the internal [`._validate_value_and_default()`][toolbox_python.defaults.Defaults._validate_value_and_default] &amp; [`._validate_type()`][toolbox_python.defaults.Defaults._validate_type] methods),\n        1. If `value` is `#!py None`, then assign `default` to `value`.\n        1. If `cast` is _not_ `#!py None`, then cast `value` to the data type in `cast`.\n            - Note, `cast` can be _either_ the actual type to convert to, _or_ a string representation of the type.\n        1. Return the updated/defaulted/casted `value` back to the user.\n\n    Params:\n        value (Any):\n            The value to check.\n        default (Optional[Any], optional):\n            The default value for `value`.&lt;br&gt;\n            Note, can be a `#!py None` value; however, if `value` is also `#!py None`, then `default` _cannot_ be `#!py None`.&lt;br&gt;\n            Defaults to `#!py None`.\n        cast (Optional[Union[str, type]], optional):\n            The data type to convert to.&lt;br&gt;\n            Must be one of: `#!py [\"bool\", \"dict\", \"int\", \"float\", \"list\", \"str\", \"tuple\"]`.&lt;br&gt;\n            Defaults to `#!py None`.\n\n    Returns:\n        value (Any):\n            The updated/defaulted/casted value.\n\n    ??? tip \"See Also\"\n        - [`Defaults._validate_value_and_default()`][toolbox_python.defaults.Defaults._validate_value_and_default]\n        - [`Defaults._validate_type()`][toolbox_python.defaults.Defaults._validate_type]\n    \"\"\"\n    (\n        self._validate_value_and_default(\n            value=value, default=default\n        )._validate_type(check_type=cast)\n    )\n    if value is None:\n        value = default\n    if cast is not None:\n        if (cast is bool or cast == \"bool\") and is_type(value, str):\n            value = bool(strtobool(value))\n        elif isinstance(cast, str):\n            value = eval(cast)(value)\n        else:\n            value = cast(value)\n    return value\n</code></pre>"},{"location":"code/defaults/#toolbox_python.defaults.Defaults._validate_value_and_default","title":"_validate_value_and_default","text":"<pre><code>_validate_value_and_default(\n    value: Optional[Any] = None,\n    default: Optional[Any] = None,\n) -&gt; Defaults\n</code></pre> <p>Summary</p> <p>Validate to ensure that <code>value</code> and <code>default</code> are not both <code>None</code>.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Optional[Any]</code> <p>The <code>value</code> to check. Defaults to <code>None</code>.</p> <code>None</code> <code>default</code> <code>Optional[Any]</code> <p>The <code>default</code> value to check. Defaults to <code>None</code>.</p> <code>None</code> <p>Raises:</p> Type Description <code>AttributeError</code> <p>If both <code>value</code> and <code>default</code> are <code>None</code>.</p> <p>Returns:</p> Name Type Description <code>self</code> <code>Defaults</code> <p>If both <code>value</code> and <code>default</code> are not both <code>None</code>, then return <code>self</code>.</p> See Also <ul> <li><code>Defaults.get()</code></li> </ul> Source code in <code>src/toolbox_python/defaults.py</code> <pre><code>def _validate_value_and_default(\n    self,\n    value: Optional[Any] = None,\n    default: Optional[Any] = None,\n) -&gt; Defaults:\n    \"\"\"\n    !!! note \"Summary\"\n        Validate to ensure that `value` and `default` are not both `#!py None`.\n\n    Params:\n        value (Optional[Any], optional):\n            The `value` to check.&lt;br&gt;\n            Defaults to `#!py None`.\n        default (Optional[Any], optional):\n            The `default` value to check.&lt;br&gt;\n            Defaults to `#!py None`.\n\n    Raises:\n        AttributeError: If both `value` and `default` are `#!py None`.\n\n    Returns:\n        self (Defaults):\n            If both `value` and `default` are not both `#!py None`, then return `self`.\n\n    ??? tip \"See Also\"\n        - [`Defaults.get()`][toolbox_python.defaults.Defaults.get]\n    \"\"\"\n    if value is None and default is None:\n        raise AttributeError(\n            f\"Both `value` and `default` are blank: '{value}', '{default}'.\\n\"\n            f\"If `value` is blank, then `default` cannot be blank.\"\n        )\n    return self\n</code></pre>"},{"location":"code/defaults/#toolbox_python.defaults.Defaults._validate_type","title":"_validate_type","text":"<pre><code>_validate_type(\n    check_type: Optional[Union[str, type]] = None\n) -&gt; Defaults\n</code></pre> <p>Summary</p> <p>Check to ensure that <code>check_type</code> is a valid Python type. Must be one of: <code>[\"bool\", \"dict\", \"int\", \"float\", \"list\", \"str\", \"tuple\"]</code>.</p> <p>Parameters:</p> Name Type Description Default <code>check_type</code> <code>Optional[Union[str, type]]</code> <p>The type to check against. Can either be an actual Python type, or it's string representation. Defaults to <code>None</code>.</p> <code>None</code> <p>Raises:</p> Type Description <code>AttributeError</code> <p>If <code>check_type</code> is both not <code>None</code> and if it is not one of the valid Python types.</p> <p>Returns:</p> Name Type Description <code>self</code> <code>Defaults</code> <p>If the type is valid, return <code>self</code>.</p> See Also <ul> <li><code>Defaults.get()</code></li> </ul> Source code in <code>src/toolbox_python/defaults.py</code> <pre><code>def _validate_type(\n    self,\n    check_type: Optional[Union[str, type]] = None,\n) -&gt; Defaults:\n    \"\"\"\n    !!! note \"Summary\"\n        Check to ensure that `check_type` is a valid Python type.&lt;br&gt;\n        Must be one of: `#!py [\"bool\", \"dict\", \"int\", \"float\", \"list\", \"str\", \"tuple\"]`.\n\n    Params:\n        check_type (Optional[Union[str, type]], optional):\n            The type to check against. Can either be an actual Python type, or it's string representation.&lt;br&gt;\n            Defaults to `#!py None`.\n\n    Raises:\n        AttributeError: If `check_type` is _both_ not `#!py None` _and_ if it is not one of the valid Python types.\n\n    Returns:\n        self (Defaults):\n            If the type is valid, return `self`.\n\n    ??? tip \"See Also\"\n        - [`Defaults.get()`][toolbox_python.defaults.Defaults.get]\n    \"\"\"\n    valid_types: list[str] = [\n        \"bool\",\n        \"dict\",\n        \"int\",\n        \"float\",\n        \"list\",\n        \"str\",\n        \"tuple\",\n    ]\n    if check_type is None:\n        return self\n    elif is_type(check_type, str):\n        retype = check_type\n    elif type(check_type).__name__ == \"type\":\n        retype = check_type.__name__  # type: ignore\n    if retype is not None and retype not in valid_types:\n        raise AttributeError(\n            f\"The value for `type` is invalid: `{retype}`.\\n\"\n            f\"Must be a valid type: {valid_types}.\"\n        )\n    return self\n</code></pre>"},{"location":"code/defaults/#toolbox_python.defaults.defaults","title":"toolbox_python.defaults.defaults  <code>module-attribute</code>","text":"<pre><code>defaults = Defaults()\n</code></pre>"},{"location":"code/dictionaries/","title":"Dictionaries","text":""},{"location":"code/dictionaries/#toolbox_python.dictionaries","title":"toolbox_python.dictionaries","text":"<p>Summary</p> <p>The <code>dictionaries</code> module is used how to manipulate and enhance Python dictionaries.</p> <p>Details</p> <p>Note that functions in this module will only take-in and manipulate existing <code>dict</code> objects, and also output <code>dict</code> objects. It will not sub-class the base <code>dict</code> object, or create new '<code>dict</code>-like' objects. It will always maintain pure python types at it's core.</p>"},{"location":"code/dictionaries/#toolbox_python.dictionaries.dict_reverse_keys_and_values","title":"dict_reverse_keys_and_values","text":"<pre><code>dict_reverse_keys_and_values(\n    dictionary: dict_any,\n) -&gt; dict_str_int\n</code></pre> <p>Summary</p> <p>Take the <code>key</code> and <code>values</code> of a dictionary, and reverse them.</p> Details <p>This process is simple enough if the <code>values</code> are atomic types, like <code>str</code>, <code>int</code>, or <code>float</code> types. But it is a little more tricky when the <code>values</code> are more complex types, like <code>list</code> or <code>dict</code>; here we need to use some recursion.</p> <p>Parameters:</p> Name Type Description Default <code>dictionary</code> <code>dict_any</code> <p>The input <code>dict</code> that you'd like to have the <code>keys</code> and <code>values</code> switched.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If any of the inputs parsed to the parameters of this function are not the correct type. Uses the <code>@typeguard.typechecked</code> decorator.</p> <code>KeyError</code> <p>When there are duplicate <code>values</code> being coerced to <code>keys</code> in the new dictionary. Raised because a Python <code>dict</code> cannot have duplicate keys of the same value.</p> <p>Returns:</p> Name Type Description <code>output_dict</code> <code>dict_str_int</code> <p>The updated <code>dict</code>.</p> Examples Set up<pre><code>&gt;&gt;&gt; # Imports\n&gt;&gt;&gt; from toolbox_python.dictionaries import dict_reverse_keys_and_values\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Basic dictionary\n&gt;&gt;&gt; dict_basic = {\n...     \"a\": 1,\n...     \"b\": 2,\n...     \"c\": 3,\n... }\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Dictionary with iterables\n&gt;&gt;&gt; dict_iterables = {\n...     \"a\": [\"1\", \"2\", \"3\"],\n...     \"b\": [4, 5, 6],\n...     \"c\": (\"7\", \"8\", \"9\"),\n...     \"d\": (10, 11, 12),\n... }\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Dictionary with iterables and duplicates\n&gt;&gt;&gt; dict_iterables_with_duplicates = {\n...     \"a\": [1, 2, 3],\n...     \"b\": [4, 2, 5],\n... }\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Dictionary with sub-dictionaries\n&gt;&gt;&gt; dict_with_dicts = {\n...     \"a\": {\n...         \"aa\": 11,\n...         \"bb\": 22,\n...         \"cc\": 33,\n...     },\n...     \"b\": {\n...         \"dd\": [1, 2, 3],\n...         \"ee\": (\"4\", \"5\", \"6\"),\n...     },\n... }\n</code></pre> <p>Example 1: Reverse one-for-one<pre><code>&gt;&gt;&gt; print(dict_reverse_keys_and_values(dict_basic))\n</code></pre> Terminal<pre><code>{\n    \"1\": \"a\",\n    \"2\": \"b\",\n    \"3\": \"c\",\n}\n</code></pre> <p>Conclusion: Successful conversion.</p> <p>Notice here that the original values were type <code>int</code>, but here they have been converted to <code>str</code>. This is because <code>dict</code> keys should ideally only be <code>str</code> type.</p> <p>Example 2: Reverse dictionary containing iterables in `values`<pre><code>&gt;&gt;&gt; print(dict_reverse_keys_and_values(dict_iterables))\n</code></pre> Terminal<pre><code>{\n    \"1\": \"a\",\n    \"2\": \"a\",\n    \"3\": \"a\",\n    \"4\": \"b\",\n    \"5\": \"b\",\n    \"6\": \"b\",\n    \"7\": \"c\",\n    \"8\": \"c\",\n    \"9\": \"c\",\n    \"10\": \"d\",\n    \"11\": \"d\",\n    \"12\": \"d\",\n}\n</code></pre> <p>Conclusion: Successful conversion.</p> <p>Notice here how it has 'flattened' the iterables in the <code>values</code> in to individual keys, and assigned the original <code>key</code> to multiple keys. They keys have again been coerced to <code>str</code> type.</p> <p>Example 3: Dictionary with iterables, raise error when `key` already exists<pre><code>&gt;&gt;&gt; print(dict_reverse_keys_and_values(dict_iterables_with_duplicates))\n</code></pre> Terminal<pre><code>KeyError: Key already existing.\nCannot update `output_dict` with new elements: {2: 'b'}\nBecause the key is already existing for: {'2': 'a'}\nFull `output_dict` so far:\n{'1': 'a', '2': 'a', '3': 'a', '4': 'b'}\n</code></pre> <p>Conclusion: Failed conversion.</p> <p>Here, in the second element of the dictionary (<code>\"b\"</code>), there is a duplicate value <code>2</code> which is already existing in the first element of the dictionary (<code>\"a\"</code>). So, we would expect to see an error.Remember, a Python <code>dict</code> object cannot contain duplicate keys. They must always be unique.</p> <p>Example 4: Dictionary with embedded dictionaries<pre><code>&gt;&gt;&gt; print(dict_reverse_keys_and_values(dict_with_dicts))\n</code></pre> Terminal<pre><code>{\n    \"1\": \"a\",\n    \"2\": \"a\",\n    \"3\": \"a\",\n    \"4\": \"b\",\n    \"5\": \"b\",\n    \"6\": \"b\",\n    \"7\": \"c\",\n    \"8\": \"c\",\n    \"9\": \"c\",\n    \"10\": \"d\",\n    \"11\": \"d\",\n    \"12\": \"d\",\n}\n</code></pre> <p>Conclusion: Successful conversion.</p> <p>Here, the process would be to run a recursive process when it recognises that any <code>value</code> is a <code>dict</code> object. So long as there are no duplicate values in any of the contained <code>dict</code>'s, the resulting output will be a big, flat dictionary.</p> Source code in <code>src/toolbox_python/dictionaries.py</code> <pre><code>@typechecked\ndef dict_reverse_keys_and_values(\n    dictionary: dict_any,\n) -&gt; dict_str_int:\n    \"\"\"\n    !!! note \"Summary\"\n        Take the `key` and `values` of a dictionary, and reverse them.\n\n    ???+ info \"Details\"\n        This process is simple enough if the `values` are atomic types, like `#!py str`, `#!py int`, or `#!py float` types. But it is a little more tricky when the `values` are more complex types, like `#!py list` or `#!py dict`; here we need to use some recursion.\n\n    Params:\n        dictionary (dict_any):\n            The input `#!py dict` that you'd like to have the `keys` and `values` switched.\n\n    Raises:\n        TypeError: If any of the inputs parsed to the parameters of this function are not the correct type. Uses the [`@typeguard.typechecked`](https://typeguard.readthedocs.io/en/stable/api.html#typeguard.typechecked) decorator.\n        KeyError: When there are duplicate `values` being coerced to `keys` in the new dictionary. Raised because a Python `#!py dict` cannot have duplicate keys of the same value.\n\n    Returns:\n        output_dict (dict_str_int):\n            The updated `#!py dict`.\n\n    ???+ example \"Examples\"\n\n        ```{.py .python linenums=\"1\" title=\"Set up\"}\n        &gt;&gt;&gt; # Imports\n        &gt;&gt;&gt; from toolbox_python.dictionaries import dict_reverse_keys_and_values\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # Basic dictionary\n        &gt;&gt;&gt; dict_basic = {\n        ...     \"a\": 1,\n        ...     \"b\": 2,\n        ...     \"c\": 3,\n        ... }\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # Dictionary with iterables\n        &gt;&gt;&gt; dict_iterables = {\n        ...     \"a\": [\"1\", \"2\", \"3\"],\n        ...     \"b\": [4, 5, 6],\n        ...     \"c\": (\"7\", \"8\", \"9\"),\n        ...     \"d\": (10, 11, 12),\n        ... }\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # Dictionary with iterables and duplicates\n        &gt;&gt;&gt; dict_iterables_with_duplicates = {\n        ...     \"a\": [1, 2, 3],\n        ...     \"b\": [4, 2, 5],\n        ... }\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # Dictionary with sub-dictionaries\n        &gt;&gt;&gt; dict_with_dicts = {\n        ...     \"a\": {\n        ...         \"aa\": 11,\n        ...         \"bb\": 22,\n        ...         \"cc\": 33,\n        ...     },\n        ...     \"b\": {\n        ...         \"dd\": [1, 2, 3],\n        ...         \"ee\": (\"4\", \"5\", \"6\"),\n        ...     },\n        ... }\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Reverse one-for-one\"}\n        &gt;&gt;&gt; print(dict_reverse_keys_and_values(dict_basic))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        {\n            \"1\": \"a\",\n            \"2\": \"b\",\n            \"3\": \"c\",\n        }\n        ```\n        !!! success \"Conclusion: Successful conversion.\"\n        !!! observation \"Notice here that the original values were type `#!py int`, but here they have been converted to `#!py str`. This is because `#!py dict` keys should ideally only be `#!py str` type.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Reverse dictionary containing iterables in `values`\"}\n        &gt;&gt;&gt; print(dict_reverse_keys_and_values(dict_iterables))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        {\n            \"1\": \"a\",\n            \"2\": \"a\",\n            \"3\": \"a\",\n            \"4\": \"b\",\n            \"5\": \"b\",\n            \"6\": \"b\",\n            \"7\": \"c\",\n            \"8\": \"c\",\n            \"9\": \"c\",\n            \"10\": \"d\",\n            \"11\": \"d\",\n            \"12\": \"d\",\n        }\n        ```\n        !!! success \"Conclusion: Successful conversion.\"\n        !!! observation \"Notice here how it has 'flattened' the iterables in the `values` in to individual keys, and assigned the original `key` to multiple keys. They keys have again been coerced to `#!py str` type.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 3: Dictionary with iterables, raise error when `key` already exists\"}\n        &gt;&gt;&gt; print(dict_reverse_keys_and_values(dict_iterables_with_duplicates))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        KeyError: Key already existing.\n        Cannot update `output_dict` with new elements: {2: 'b'}\n        Because the key is already existing for: {'2': 'a'}\n        Full `output_dict` so far:\n        {'1': 'a', '2': 'a', '3': 'a', '4': 'b'}\n        ```\n        !!! failure \"Conclusion: Failed conversion.\"\n        !!! observation \"Here, in the second element of the dictionary (`#!py \"b\"`), there is a duplicate value `#!py 2` which is already existing in the first element of the dictionary (`#!py \"a\"`). So, we would expect to see an error.&lt;br&gt;Remember, a Python `#!py dict` object _cannot_ contain duplicate keys. They must always be unique.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 4: Dictionary with embedded dictionaries\"}\n        &gt;&gt;&gt; print(dict_reverse_keys_and_values(dict_with_dicts))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        {\n            \"1\": \"a\",\n            \"2\": \"a\",\n            \"3\": \"a\",\n            \"4\": \"b\",\n            \"5\": \"b\",\n            \"6\": \"b\",\n            \"7\": \"c\",\n            \"8\": \"c\",\n            \"9\": \"c\",\n            \"10\": \"d\",\n            \"11\": \"d\",\n            \"12\": \"d\",\n        }\n        ```\n        !!! success \"Conclusion: Successful conversion.\"\n        !!! observation \"Here, the process would be to run a recursive process when it recognises that any `value` is a `#!py dict` object. So long as there are no duplicate values in any of the contained `#!py dict`'s, the resulting output will be a big, flat dictionary.\"\n        &lt;/div&gt;\n    \"\"\"\n    output_dict: dict_str_int = dict()\n    for key, value in dictionary.items():\n        if isinstance(value, (str, int, float)):\n            output_dict[str(value)] = key\n        elif isinstance(value, (tuple, list)):\n            for elem in value:\n                if str(elem) in output_dict.keys():\n                    raise KeyError(\n                        f\"Key already existing.\\n\"\n                        f\"Cannot update `output_dict` with new elements: { {elem: key} }\\n\"\n                        f\"Because the key is already existing for: { {new_key: new_value for (new_key, new_value) in output_dict.items() if new_key==str(elem)} }\\n\"\n                        f\"Full `output_dict` so far:\\n{output_dict}\"\n                    )\n                output_dict[str(elem)] = key\n        elif isinstance(value, dict):\n            interim_dict: dict_str_int = dict_reverse_keys_and_values(value)\n            output_dict = {\n                **output_dict,\n                **interim_dict,\n            }\n    return output_dict\n</code></pre>"},{"location":"code/lists/","title":"Lists","text":""},{"location":"code/lists/#toolbox_python.lists","title":"toolbox_python.lists","text":"<p>Summary</p> <p>The <code>lists</code> module is used to manipulate and enhance Python <code>list</code>'s.</p> <p>Details</p> <p>Note that functions in this module will only take-in and manipulate existing <code>list</code> objects, and also output <code>list</code> objects. It will not sub-class the base <code>list</code> object, or create new '<code>list</code>-like' objects. It will always maintain pure python types at it's core.</p>"},{"location":"code/lists/#toolbox_python.lists.flatten","title":"flatten","text":"<pre><code>flatten(\n    list_of_lists: Union[scalar, collection],\n    base_type: Optional[type] = None,\n    levels: Optional[int] = None,\n) -&gt; any_list\n</code></pre> <p>Summary</p> <p>For a given <code>list</code> of <code>list</code>'s, flatten it out to be a single <code>list</code>.</p> Details <p>Under the hood, this function will call the <code>more_itertools.collapse()</code> function. The difference between this function and the <code>more_itertools.collapse()</code> function is that the one from <code>more_itertools</code> will return a <code>chain</code> object, not a <code>list</code> object. So, all we do here is call the <code>more_itertools.collapse()</code> function, then parse the result in to a <code>list()</code> function to ensure that the result is always a <code>list</code> object.</p> <p>Parameters:</p> Name Type Description Default <code>list_of_lists</code> <code>list[any_list]</code> <p>The input <code>list</code> of <code>list</code>'s that you'd like to flatten to a single-level <code>list</code>.</p> required <code>base_type</code> <code>Optional[type]</code> <p>Binary and text strings are not considered iterable and will not be collapsed. To avoid collapsing other types, specify <code>base_type</code>. Defaults to <code>None</code>.</p> <code>None</code> <code>levels</code> <code>Optional[int]</code> <p>Specify <code>levels</code> to stop flattening after a certain nested level. Defaults to <code>None</code>.</p> <code>None</code> <p>Raises:</p> Type Description <code>TypeError</code> <p>If any of the inputs parsed to the parameters of this function are not the correct type. Uses the <code>@typeguard.typechecked</code> decorator.</p> <p>Returns:</p> Type Description <code>any_list</code> <p>The updated <code>list</code>.</p> Examples Set up<pre><code>&gt;&gt;&gt; from toolbox_python.lists import flatten\n</code></pre> <p>Example 1: Basic list, same input &amp; output<pre><code>&gt;&gt;&gt; print(flatten([0, 1, 2, 3]))\n</code></pre> Terminal<pre><code>[0, 1, 2, 3]\n</code></pre> <p>Conclusion: Successful flattening.</p> <p>Example 2: List containing two lists<pre><code>&gt;&gt;&gt; print(flatten([[0, 1], [2, 3]]))\n</code></pre> Terminal<pre><code>[0, 1, 2, 3]\n</code></pre> <p>Conclusion: Successful flattening.</p> <p>Example 3: List containing a list and other data<pre><code>&gt;&gt;&gt; print(flatten([0, 1, [2, 3]]))\n</code></pre> Terminal<pre><code>[0, 1, 2, 3]\n</code></pre> <p>Conclusion: Successful flattening.</p> <p>Example 4: List containing two lists and other data<pre><code>&gt;&gt;&gt; print(flatten([[0, 1], [2, 3], 4, 5]))\n</code></pre> Terminal<pre><code>[0, 1, 2, 3, 4, 5]\n</code></pre> <p>Conclusion: Successful flattening.</p> <p>Example 5: List containing a list, a tuple, and other data<pre><code>&gt;&gt;&gt; print(flatten([[0, 1], (2, 3), 4, 5]))\n</code></pre> Terminal<pre><code>[0, 1, 2, 3, 4, 5]\n</code></pre> <p>Conclusion: Successful flattening.</p> <p>Example 6: List containing up to three levels deep<pre><code>&gt;&gt;&gt; print(flatten([[0, 1], [2, 3, [4, 5]]]))\n</code></pre> Terminal<pre><code>[0, 1, 2, 3, 4, 5]\n</code></pre> <p>Conclusion: Successful flattening.</p> <p>Example 7: List containing up to three levels deep, plus other data<pre><code>&gt;&gt;&gt; print(flatten([[0, 1], [2, 3, [4, 5]], 6, 7]))\n</code></pre> Terminal<pre><code>[0, 1, 2, 3, 4, 5, 6, 7]\n</code></pre> <p>Conclusion: Successful flattening.</p> <p>Example 8: List containing up to four levels deep<pre><code>&gt;&gt;&gt; print(flatten([[0, 1], [2, 3, [4, [5]]]]))\n</code></pre> Terminal<pre><code>[0, 1, 2, 3, 4, 5]\n</code></pre> <p>Conclusion: Successful flattening.</p> See Also <ul> <li><code>more_itertools</code></li> <li><code>more_itertools.collapse()</code></li> </ul> Source code in <code>src/toolbox_python/lists.py</code> <pre><code>@typechecked\ndef flatten(\n    list_of_lists: Union[scalar, collection],\n    base_type: Optional[type] = None,\n    levels: Optional[int] = None,\n) -&gt; any_list:\n    \"\"\"\n    !!! note \"Summary\"\n        For a given `#!py list` of `#!py list`'s, flatten it out to be a single `#!py list`.\n\n    ???+ info \"Details\"\n        Under the hood, this function will call the [`#!py more_itertools.collapse()`][more_itertools.collapse] function. The difference between this function and the [`#!py more_itertools.collapse()`][more_itertools.collapse] function is that the one from [`#!py more_itertools`][more_itertools] will return a `chain` object, not a `list` object. So, all we do here is call the [`#!py more_itertools.collapse()`][more_itertools.collapse] function, then parse the result in to a `#!py list()` function to ensure that the result is always a `#!py list` object.\n\n        [more_itertools]: https://more-itertools.readthedocs.io/en/stable/api.html\n        [more_itertools.collapse]: https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.collapse\n\n    Params:\n        list_of_lists (list[any_list]):\n            The input `#!py list` of `#!py list`'s that you'd like to flatten to a single-level `#!py list`.\n        base_type (Optional[type], optional):\n            Binary and text strings are not considered iterable and will not be collapsed. To avoid collapsing other types, specify `base_type`.&lt;br&gt;\n            Defaults to `#!py None`.\n        levels (Optional[int], optional):\n            Specify `levels` to stop flattening after a certain nested level.&lt;br&gt;\n            Defaults to `#!py None`.\n\n    Raises:\n        TypeError: If any of the inputs parsed to the parameters of this function are not the correct type. Uses the [`@typeguard.typechecked`](https://typeguard.readthedocs.io/en/stable/api.html#typeguard.typechecked) decorator.\n\n    Returns:\n        (any_list):\n            The updated `#!py list`.\n\n    ???+ example \"Examples\"\n\n        ```{.py .python linenums=\"1\" title=\"Set up\"}\n        &gt;&gt;&gt; from toolbox_python.lists import flatten\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Basic list, same input &amp; output\"}\n        &gt;&gt;&gt; print(flatten([0, 1, 2, 3]))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        [0, 1, 2, 3]\n        ```\n        !!! success \"Conclusion: Successful flattening.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: List containing two lists\"}\n        &gt;&gt;&gt; print(flatten([[0, 1], [2, 3]]))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        [0, 1, 2, 3]\n        ```\n        !!! success \"Conclusion: Successful flattening.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 3: List containing a list and other data\"}\n        &gt;&gt;&gt; print(flatten([0, 1, [2, 3]]))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        [0, 1, 2, 3]\n        ```\n        !!! success \"Conclusion: Successful flattening.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 4: List containing two lists and other data\"}\n        &gt;&gt;&gt; print(flatten([[0, 1], [2, 3], 4, 5]))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        [0, 1, 2, 3, 4, 5]\n        ```\n        !!! success \"Conclusion: Successful flattening.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 5: List containing a list, a tuple, and other data\"}\n        &gt;&gt;&gt; print(flatten([[0, 1], (2, 3), 4, 5]))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        [0, 1, 2, 3, 4, 5]\n        ```\n        !!! success \"Conclusion: Successful flattening.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 6: List containing up to three levels deep\"}\n        &gt;&gt;&gt; print(flatten([[0, 1], [2, 3, [4, 5]]]))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        [0, 1, 2, 3, 4, 5]\n        ```\n        !!! success \"Conclusion: Successful flattening.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 7: List containing up to three levels deep, plus other data\"}\n        &gt;&gt;&gt; print(flatten([[0, 1], [2, 3, [4, 5]], 6, 7]))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        [0, 1, 2, 3, 4, 5, 6, 7]\n        ```\n        !!! success \"Conclusion: Successful flattening.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 8: List containing up to four levels deep\"}\n        &gt;&gt;&gt; print(flatten([[0, 1], [2, 3, [4, [5]]]]))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        [0, 1, 2, 3, 4, 5]\n        ```\n        !!! success \"Conclusion: Successful flattening.\"\n        &lt;/div&gt;\n\n    ??? tip \"See Also\"\n        - [`more_itertools`](https://more-itertools.readthedocs.io/en/stable/api.html)\n        - [`more_itertools.collapse()`](https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.collapse)\n    \"\"\"\n    return list(\n        itertools_collapse(\n            iterable=list_of_lists,\n            base_type=base_type,\n            levels=levels,\n        )\n    )\n</code></pre>"},{"location":"code/lists/#toolbox_python.lists.flat_list","title":"flat_list","text":"<pre><code>flat_list(*inputs: Any) -&gt; any_list\n</code></pre> <p>Summary</p> <p>Take in any number of inputs, and output them all in to a single flat <code>list</code>.</p> <p>Parameters:</p> Name Type Description Default <code>inputs</code> <code>Any</code> <p>Any input.</p> <code>()</code> <p>Raises:</p> Type Description <code>TypeError</code> <p>If any of the inputs parsed to the parameters of this function are not the correct type. Uses the <code>@typeguard.typechecked</code> decorator.</p> <p>Returns:</p> Type Description <code>any_list</code> <p>The input having been coerced to a single flat <code>list</code>.</p> Examples Set up<pre><code>&gt;&gt;&gt; from toolbox_python.lists import flat_list\n</code></pre> <p>Example 1: Basic input &amp; output<pre><code>&gt;&gt;&gt; print(flat_list(0, 1, 2, 3))\n</code></pre> Terminal<pre><code>[0, 1, 2, 3]\n</code></pre> <p>Conclusion: Successful flattening.</p> <p>Example 2: Multiple lists<pre><code>&gt;&gt;&gt; print(flat_list([0, 1], [2, 3]))\n</code></pre> Terminal<pre><code>[0, 1, 2, 3]\n</code></pre> <p>Conclusion: Successful flattening.</p> <p>Example 3: List and other data<pre><code>&gt;&gt;&gt; print(flat_list(0, 1, [2, 3]))\n</code></pre> Terminal<pre><code>[0, 1, 2, 3]\n</code></pre> <p>Conclusion: Successful flattening.</p> <p>Example 4: Multiple lists and other data<pre><code>&gt;&gt;&gt; print(flat_list([0, 1], [2, 3], 4, 5))\n</code></pre> Terminal<pre><code>[0, 1, 2, 3, 4, 5]\n</code></pre> <p>Conclusion: Successful flattening.</p> <p>Example 5: List and a tuple and other data<pre><code>&gt;&gt;&gt; print(flat_list([0, 1], (2, 3), 4, 5))\n</code></pre> Terminal<pre><code>[0, 1, 2, 3, 4, 5]\n</code></pre> <p>Conclusion: Successful flattening.</p> <p>Example 6: List and a nested list<pre><code>&gt;&gt;&gt; print(flat_list([0, 1], [2, 3, [4, 5]]))\n</code></pre> Terminal<pre><code>[0, 1, 2, 3, 4, 5]\n</code></pre> <p>Conclusion: Successful flattening.</p> <p>Example 7: List and a nested list and other data<pre><code>&gt;&gt;&gt; print(flat_list([0, 1], [2, 3, [4, 5]], 6, 7))\n</code></pre> Terminal<pre><code>[0, 1, 2, 3, 4, 5, 6, 7]\n</code></pre> <p>Conclusion: Successful flattening.</p> <p>Example 8: Deep nested lists<pre><code>&gt;&gt;&gt; print(flat_list([0, 1], [2, 3, [4, [5]]]))\n</code></pre> Terminal<pre><code>[0, 1, 2, 3, 4, 5]\n</code></pre> <p>Conclusion: Successful flattening.</p> See Also <ul> <li><code>flatten()</code></li> </ul> Source code in <code>src/toolbox_python/lists.py</code> <pre><code>@typechecked\ndef flat_list(*inputs: Any) -&gt; any_list:\n    \"\"\"\n    !!! note \"Summary\"\n        Take in any number of inputs, and output them all in to a single flat `#!py list`.\n\n    Params:\n        inputs (Any):\n            Any input.\n\n    Raises:\n        TypeError: If any of the inputs parsed to the parameters of this function are not the correct type. Uses the [`@typeguard.typechecked`](https://typeguard.readthedocs.io/en/stable/api.html#typeguard.typechecked) decorator.\n\n    Returns:\n        (any_list):\n            The input having been coerced to a single flat `#!py list`.\n\n    ???+ example \"Examples\"\n\n        ```{.py .python linenums=\"1\" title=\"Set up\"}\n        &gt;&gt;&gt; from toolbox_python.lists import flat_list\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Basic input &amp; output\"}\n        &gt;&gt;&gt; print(flat_list(0, 1, 2, 3))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        [0, 1, 2, 3]\n        ```\n        !!! success \"Conclusion: Successful flattening.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Multiple lists\"}\n        &gt;&gt;&gt; print(flat_list([0, 1], [2, 3]))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        [0, 1, 2, 3]\n        ```\n        !!! success \"Conclusion: Successful flattening.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 3: List and other data\"}\n        &gt;&gt;&gt; print(flat_list(0, 1, [2, 3]))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        [0, 1, 2, 3]\n        ```\n        !!! success \"Conclusion: Successful flattening.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 4: Multiple lists and other data\"}\n        &gt;&gt;&gt; print(flat_list([0, 1], [2, 3], 4, 5))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        [0, 1, 2, 3, 4, 5]\n        ```\n        !!! success \"Conclusion: Successful flattening.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 5: List and a tuple and other data\"}\n        &gt;&gt;&gt; print(flat_list([0, 1], (2, 3), 4, 5))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        [0, 1, 2, 3, 4, 5]\n        ```\n        !!! success \"Conclusion: Successful flattening.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 6: List and a nested list\"}\n        &gt;&gt;&gt; print(flat_list([0, 1], [2, 3, [4, 5]]))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        [0, 1, 2, 3, 4, 5]\n        ```\n        !!! success \"Conclusion: Successful flattening.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 7: List and a nested list and other data\"}\n        &gt;&gt;&gt; print(flat_list([0, 1], [2, 3, [4, 5]], 6, 7))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        [0, 1, 2, 3, 4, 5, 6, 7]\n        ```\n        !!! success \"Conclusion: Successful flattening.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 8: Deep nested lists\"}\n        &gt;&gt;&gt; print(flat_list([0, 1], [2, 3, [4, [5]]]))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        [0, 1, 2, 3, 4, 5]\n        ```\n        !!! success \"Conclusion: Successful flattening.\"\n        &lt;/div&gt;\n\n    ??? tip \"See Also\"\n        - [`flatten()`][toolbox_python.lists.flatten]\n    \"\"\"\n    return flatten(list(inputs))\n</code></pre>"},{"location":"code/lists/#toolbox_python.lists.product","title":"product","text":"<pre><code>product(*iterables) -&gt; list[any_tuple]\n</code></pre> <p>Summary</p> <p>For a given number of <code>iterables</code>, perform a cartesian product on them, and return the result as a list.</p> Details <p>Under the hood, this function will call the <code>itertools.product()</code> function. The difference between this function and the <code>itertools.product()</code> function is that the one from <code>itertools</code> will return a <code>product</code> object, not a <code>list</code> object. So, all we do here is call the <code>itertools.product()</code> function, then parse the result in to a <code>list()</code> function to ensure that the result is always a <code>list</code> object.</p> <p>Parameters:</p> Name Type Description Default <code>iterables</code> <code>Any</code> <p>The input <code>iterables</code> that you'd like to expand out.</p> <code>()</code> <p>Returns:</p> Type Description <code>list[tuple[Any, ...]]</code> <p>The updated <code>list</code> list of <code>tuple</code>'s representing the Cartesian product of the provided iterables.</p> Examples Set up<pre><code>&gt;&gt;&gt; from toolbox_python.lists import product\n</code></pre> <p>Example 1: Basic input &amp; output<pre><code>&gt;&gt;&gt; print(product([1], [11], [111]))\n</code></pre> Terminal<pre><code>[\n    (1, 11, 111),\n]\n</code></pre> <p>Conclusion: Successful conversion.</p> <p>Example 2: Multiple lists<pre><code>&gt;&gt;&gt; print(product([1, 2], [11], [111]))\n</code></pre> Terminal<pre><code>[\n    (1, 11, 111),\n    (2, 11, 111),\n]\n</code></pre> <p>Conclusion: Successful conversion.</p> <p>Example 3: List and other data<pre><code>&gt;&gt;&gt; print(product([1, 2], [11], [111, 222]))\n</code></pre> Terminal<pre><code>[\n    (1, 11, 111),\n    (1, 11, 222),\n    (2, 11, 111),\n    (2, 11, 222),\n]\n</code></pre> <p>Conclusion: Successful conversion.</p> <p>Example 4: Multiple lists and other data<pre><code>&gt;&gt;&gt; print(product([1, 2], [11, 22], [111, 222]))\n</code></pre> Terminal<pre><code>[\n    (1, 11, 111),\n    (1, 11, 222),\n    (1, 22, 111),\n    (1, 22, 222),\n    (2, 11, 111),\n    (2, 11, 222),\n    (2, 22, 111),\n    (2, 22, 222),\n]\n</code></pre> <p>Conclusion: Successful conversion.</p> See Also <ul> <li>itertools</li> <li>itertools.product()</li> </ul> Source code in <code>src/toolbox_python/lists.py</code> <pre><code>def product(*iterables) -&gt; list[any_tuple]:\n    \"\"\"\n    !!! note \"Summary\"\n        For a given number of `#!py iterables`, perform a cartesian product on them, and return the result as a list.\n\n    ???+ info \"Details\"\n        Under the hood, this function will call the [`#!py itertools.product()`][itertools.product] function. The difference between this function and the [`#!py itertools.product()`][itertools.product] function is that the one from [`#!py itertools`][itertools] will return a `product` object, not a `list` object. So, all we do here is call the [`#!py itertools.product()`][itertools.product] function, then parse the result in to a `#!py list()` function to ensure that the result is always a `#!py list` object.\n\n        [itertools]: https://docs.python.org/3/library/itertools.html\n        [itertools.product]: https://docs.python.org/3/library/itertools.html#itertools.product\n\n    Params:\n        iterables (Any):\n            The input `#!py iterables` that you'd like to expand out.\n\n    Returns:\n        (list[tuple[Any, ...]]):\n            The updated `#!py list` list of `#!py tuple`'s representing the Cartesian product of the provided iterables.\n\n    ???+ example \"Examples\"\n\n        ```{.py .python linenums=\"1\" title=\"Set up\"}\n        &gt;&gt;&gt; from toolbox_python.lists import product\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Basic input &amp; output\"}\n        &gt;&gt;&gt; print(product([1], [11], [111]))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        [\n            (1, 11, 111),\n        ]\n        ```\n        !!! success \"Conclusion: Successful conversion.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Multiple lists\"}\n        &gt;&gt;&gt; print(product([1, 2], [11], [111]))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        [\n            (1, 11, 111),\n            (2, 11, 111),\n        ]\n        ```\n        !!! success \"Conclusion: Successful conversion.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 3: List and other data\"}\n        &gt;&gt;&gt; print(product([1, 2], [11], [111, 222]))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        [\n            (1, 11, 111),\n            (1, 11, 222),\n            (2, 11, 111),\n            (2, 11, 222),\n        ]\n        ```\n        !!! success \"Conclusion: Successful conversion.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 4: Multiple lists and other data\"}\n        &gt;&gt;&gt; print(product([1, 2], [11, 22], [111, 222]))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        [\n            (1, 11, 111),\n            (1, 11, 222),\n            (1, 22, 111),\n            (1, 22, 222),\n            (2, 11, 111),\n            (2, 11, 222),\n            (2, 22, 111),\n            (2, 22, 222),\n        ]\n        ```\n        !!! success \"Conclusion: Successful conversion.\"\n        &lt;/div&gt;\n\n    ??? tip \"See Also\"\n        - [itertools](https://docs.python.org/3/library/itertools.html)\n        - [itertools.product()](https://docs.python.org/3/library/itertools.html#itertools.product)\n    \"\"\"\n    return list(itertools_product(*iterables))\n</code></pre>"},{"location":"code/output/","title":"Output","text":""},{"location":"code/output/#toolbox_python.output","title":"toolbox_python.output","text":"<p>Summary</p> <p>The <code>output</code> module is for streamlining how data is outputted. This includes <code>print()</code>'ing to the terminal and <code>log()</code>'ing to files.</p>"},{"location":"code/output/#toolbox_python.output.print_or_log_output","title":"print_or_log_output","text":"<pre><code>print_or_log_output(\n    message: str,\n    print_or_log: Literal[\"print\", \"log\"] = \"print\",\n    log: Optional[Logger] = None,\n    log_level: Optional[log_levels] = None,\n) -&gt; None\n</code></pre> <p>Summary</p> <p>Determine whether to <code>print()</code> or <code>log()</code> a given <code>message</code>.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The <code>message</code> to be processed.</p> required <code>print_or_log</code> <code>Optional[Literal['print', 'log']]</code> <p>The option for what to do with the <code>message</code>. Defaults to <code>\"print\"</code>.</p> <code>'print'</code> <code>log</code> <code>Optional[Logger]</code> <p>If <code>print_or_log==\"log\"</code>, then this parameter must contain the <code>Logger</code> object to be processed, otherwise it will raise an <code>AssertError</code>. Defaults to <code>None</code>.</p> <code>None</code> <code>log_level</code> <code>Optional[_log_levels]</code> <p>If <code>print_or_log==\"log\"</code>, then this parameter must contain the required log level for the <code>message</code>. Must be one of the log-levels available in the <code>logging</code> module. Defaults to <code>None</code>.</p> <code>None</code> <p>Raises:</p> Type Description <code>TypeError</code> <p>If any of the inputs parsed to the parameters of this function are not the correct type. Uses the <code>@typeguard.typechecked</code> decorator.</p> <code>AssertError</code> <p>If <code>print_or_log==\"log\"</code> and <code>log</code> is not an instance of <code>Logger</code>.</p> <p>Returns:</p> Type Description <code>None</code> <p>Nothing is returned. Only printed or logged.</p> Examples Set up data for examples<pre><code>&gt;&gt;&gt; from toolbox_python.output import print_or_log_output\n&gt;&gt;&gt; import logging\n&gt;&gt;&gt; logging.basicConfig(filename=\"logs.log\", encoding=\"utf-8\")\n&gt;&gt;&gt; log = logging.getLogger(\"root\")\n&gt;&gt;&gt; default_message = \"This is a\"\n</code></pre> <p>Example 1: Print output<pre><code>&gt;&gt;&gt; print_or_log_output(\n...     message=f\"{default_message} print\",\n...     print_or_log=\"print\",\n... )\n</code></pre> Terminal<pre><code>This is a print\n</code></pre> <p>Conclusion: Successfully printed the message.</p> <p>Example 2: Log `info`<pre><code>&gt;&gt;&gt; print_or_log_output(\n...     message=f\"{default_message}n info\",\n...     print_or_log=\"log\",\n...     log=log,\n...     log_level=\"info\",\n... )\n</code></pre> logs.log<pre><code>INFO:root:This is an info\n</code></pre> <p>Conclusion: Successfully logged the message.</p> <p>Example 3: Log `debug`<pre><code>&gt;&gt;&gt; print_or_log_output(\n...     message=f\"{default_message} debug\",\n...     print_or_log=\"log\",\n...     log=log,\n...     log_level=\"debug\",\n... )\n</code></pre> logs.log<pre><code>INFO:root:This is an info\nDEBUG:root:This is a debug\n</code></pre> <p>Conclusion: Successfully added message to logs.</p> <p>Note: This logging structure will continue for every new call to <code>print_or_log_output()</code> when <code>print_or_log=\"log\"</code>, and the <code>log</code> and <code>log_level</code> parameters are valid.</p> <p>Example 7: Invalid `print_or_log` input<pre><code>&gt;&gt;&gt; print_or_log_output(\n...     message=f\"{default_message} invalid\",\n...     print_or_log=\"error\",\n... )\n</code></pre> Terminal<pre><code>TypeError: ...\n</code></pre> <p>Conclusion: <code>print_or_log</code> can only have the string values <code>\"print\"</code> or <code>\"log\"</code>.</p> <p>Example 8: Invalid `log` input<pre><code>&gt;&gt;&gt; print_or_log_output(\n...     message=f\"{default_message} invalid\",\n...     print_or_log=\"log\",\n...     log=None,\n...     log_level=\"info\",\n... )\n</code></pre> Terminal<pre><code>AssertionError: When `print_or_log=='log'` then `log` must be type `Logger`. Here, you have parsed: '&lt;class 'NoneType'&gt;'\n</code></pre> <p>Conclusion: When <code>print_or_log=\"log\"</code> then <code>log</code> must be an instance of <code>Logger</code>.</p> <p>Example 9: Invalid `log_level` input<pre><code>&gt;&gt;&gt; print_or_log_output(\n...     message=f\"{default_message} invalid\",\n...     print_or_log=\"log\",\n...     log=log,\n...     log_level=\"invalid\",\n... )\n</code></pre> Terminal<pre><code>TypeError: ...\n</code></pre> <p>Conclusion: <code>log_level</code> must be a valid log level from the <code>logging</code> module.</p> Source code in <code>src/toolbox_python/output.py</code> <pre><code>@typechecked\ndef print_or_log_output(\n    message: str,\n    print_or_log: Literal[\"print\", \"log\"] = \"print\",\n    log: Optional[Logger] = None,\n    log_level: Optional[log_levels] = None,\n) -&gt; None:\n    \"\"\"\n    !!! note \"Summary\"\n        Determine whether to `#!py print()` or `#!py log()` a given `message`.\n\n    Params:\n        message (str):\n            The `message` to be processed.\n        print_or_log (Optional[Literal[\"print\", \"log\"]], optional):\n            The option for what to do with the `message`.&lt;br&gt;\n            Defaults to `#!py \"print\"`.\n        log (Optional[Logger], optional):\n            If `#!py print_or_log==\"log\"`, then this parameter must contain the `#!py Logger` object to be processed,\n            otherwise it will raise an `#!py AssertError`.&lt;br&gt;\n            Defaults to `#!py None`.\n        log_level (Optional[_log_levels], optional):\n            If `#!py print_or_log==\"log\"`, then this parameter must contain the required log level for the `message`.\n            Must be one of the log-levels available in the `#!py logging` module.&lt;br&gt;\n            Defaults to `#!py None`.\n\n    Raises:\n        TypeError:\n            If any of the inputs parsed to the parameters of this function are not the correct type. Uses the [`@typeguard.typechecked`](https://typeguard.readthedocs.io/en/stable/api.html#typeguard.typechecked) decorator.\n        AssertError:\n            If `#!py print_or_log==\"log\"` and `#!py log` is not an instance of `#!py Logger`.\n\n    Returns:\n        (None):\n            Nothing is returned. Only printed or logged.\n\n    ???+ example \"Examples\"\n\n        ```{.py .python linenums=\"1\" title=\"Set up data for examples\"}\n        &gt;&gt;&gt; from toolbox_python.output import print_or_log_output\n        &gt;&gt;&gt; import logging\n        &gt;&gt;&gt; logging.basicConfig(filename=\"logs.log\", encoding=\"utf-8\")\n        &gt;&gt;&gt; log = logging.getLogger(\"root\")\n        &gt;&gt;&gt; default_message = \"This is a\"\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Print output\"}\n        &gt;&gt;&gt; print_or_log_output(\n        ...     message=f\"{default_message} print\",\n        ...     print_or_log=\"print\",\n        ... )\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.txt .text title=\"Terminal\"}\n        This is a print\n        ```\n        !!! success \"Conclusion: Successfully printed the message.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Log `info`\"}\n        &gt;&gt;&gt; print_or_log_output(\n        ...     message=f\"{default_message}n info\",\n        ...     print_or_log=\"log\",\n        ...     log=log,\n        ...     log_level=\"info\",\n        ... )\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.log .log title=\"logs.log\"}\n        INFO:root:This is an info\n        ```\n        !!! success \"Conclusion: Successfully logged the message.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 3: Log `debug`\"}\n        &gt;&gt;&gt; print_or_log_output(\n        ...     message=f\"{default_message} debug\",\n        ...     print_or_log=\"log\",\n        ...     log=log,\n        ...     log_level=\"debug\",\n        ... )\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.log .log title=\"logs.log\"}\n        INFO:root:This is an info\n        DEBUG:root:This is a debug\n        ```\n        !!! success \"Conclusion: Successfully added message to logs.\"\n        !!! observation \"Note: This logging structure will continue for every new call to `print_or_log_output()` when `print_or_log=\"log\"`, and the `log` and `log_level` parameters are valid.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 7: Invalid `print_or_log` input\"}\n        &gt;&gt;&gt; print_or_log_output(\n        ...     message=f\"{default_message} invalid\",\n        ...     print_or_log=\"error\",\n        ... )\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.txt .text title=\"Terminal\"}\n        TypeError: ...\n        ```\n        !!! failure \"Conclusion: `print_or_log` can only have the string values `\"print\"` or `\"log\"`.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 8: Invalid `log` input\"}\n        &gt;&gt;&gt; print_or_log_output(\n        ...     message=f\"{default_message} invalid\",\n        ...     print_or_log=\"log\",\n        ...     log=None,\n        ...     log_level=\"info\",\n        ... )\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.txt .text title=\"Terminal\"}\n        AssertionError: When `print_or_log=='log'` then `log` must be type `Logger`. Here, you have parsed: '&lt;class 'NoneType'&gt;'\n        ```\n        !!! failure \"Conclusion: When `print_or_log=\"log\"` then `#!py log` must be an instance of `#!py Logger`.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 9: Invalid `log_level` input\"}\n        &gt;&gt;&gt; print_or_log_output(\n        ...     message=f\"{default_message} invalid\",\n        ...     print_or_log=\"log\",\n        ...     log=log,\n        ...     log_level=\"invalid\",\n        ... )\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.txt .text title=\"Terminal\"}\n        TypeError: ...\n        ```\n        !!! failure \"Conclusion: `log_level` must be a valid log level from the `logging` module.\"\n        &lt;/div&gt;\n    \"\"\"\n\n    # Early exit when printing the message\n    if print_or_log == \"print\":\n        print(message)\n        return None\n\n    # Check in put for logging\n    if not is_type(log, Logger):\n        raise TypeError(\n            f\"When `print_or_log=='log'` then `log` must be type `Logger`. \"\n            f\"Here, you have parsed: '{type(log)}'\"\n        )\n    if log_level is None:\n        raise ValueError(\n            f\"When `print_or_log=='log'` then `log_level` must be parsed \"\n            f\"with a valid value from: {log_levels}.\"\n        )\n\n    # Assertions to \u007fkeep `mypy` happy\n    assert log is not None\n    assert log_level is not None\n\n    # Do logging\n    log.log(\n        level=_nameToLevel[log_level.upper()],\n        msg=message,\n    )\n</code></pre>"},{"location":"code/output/#toolbox_python.output.list_columns","title":"list_columns","text":"<pre><code>list_columns(\n    obj: list,\n    cols_wide: int = 4,\n    columnwise: bool = True,\n    gap: int = 4,\n    print_output: bool = True,\n) -&gt; Optional[str]\n</code></pre> <p>Note</p> <p>Print the given list in evenly-spaced columns.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>list</code> <p>The list to be formatted.</p> required <code>cols_wide</code> <code>int</code> <p>The number of columns in which the list should be formatted. Defaults to: <code>4</code>.</p> <code>4</code> <code>columnwise</code> <code>bool</code> <p>Whether or not to print columnwise or rowwise.</p> <ul> <li><code>True</code>: Will be formatted column-wise.</li> <li><code>False</code>: Will be formatted row-wise.</li> </ul> <p>Defaults to: <code>True</code>.</p> <code>True</code> <code>gap</code> <code>int</code> <p>The number of spaces that should separate the longest column item/s from the next column. This is the effective spacing between columns based on the maximum <code>len()</code> of the list items. Defaults to: <code>4</code>.</p> <code>4</code> <code>print_output</code> <code>bool</code> <p>Whether or not to print the output to the terminal.</p> <ul> <li><code>True</code>: Will print and return.</li> <li><code>False</code>: Will not print; only return.</li> </ul> <p>Defaults to: <code>True</code>.</p> <code>True</code> <p>Raises:</p> Type Description <code>TypeError</code> <p>If any of the inputs parsed to the parameters of this function are not the correct type. Uses the <code>@typeguard.typechecked</code> decorator.</p> <p>Returns:</p> Name Type Description <code>printer</code> <code>Optional[str]</code> <p>The formatted string object.</p> Examples Set up<pre><code>&gt;&gt;&gt; # Imports\n&gt;&gt;&gt; from toolbox_python.output import list_columns\n&gt;&gt;&gt; import requests\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Define function to fetch list of words\n&gt;&gt;&gt; def get_list_of_words(num_words: int = 100):\n...     word_url = \"https://www.mit.edu/~ecprice/wordlist.10000\"\n...     response = requests.get(word_url)\n...     words = response.content.decode().splitlines()\n...     return words[:num_words]\n</code></pre> <p>Example 1: Default parameters<pre><code>&gt;&gt;&gt; list_columns(get_list_of_words(4 * 5))\n</code></pre> Terminal<pre><code>a             abandoned     able          abraham\naa            abc           aboriginal    abroad\naaa           aberdeen      abortion      abs\naaron         abilities     about         absence\nab            ability       above         absent\n</code></pre> <p>Conclusion: Successfully printed the list in columns.</p> <p>Example 2: Columnwise with 2 columns<pre><code>&gt;&gt;&gt; list_columns(\n...     get_list_of_words(5),\n...     cols_wide=2,\n...     columnwise=True,\n... )\n</code></pre> Terminal<pre><code>a        aaron\naa       ab\naaa\n</code></pre> <p>Conclusion: Successfully printed the list in columns.</p> <p>Example 3: Rowwise with 3 columns<pre><code>&gt;&gt;&gt; list_columns(\n...     get_list_of_words(4 * 3),\n...     columnwise=False,\n...     cols_wide=3,\n...     print_output=True,\n... )\n</code></pre> Terminal<pre><code>a             aa            aaa\naaron         ab            abandoned\nabc           aberdeen      abilities\nability       able          aboriginal\n</code></pre> <p>Conclusion: Successfully printed the list in rows.</p> <p>Example 4: Rowwise with 2 columns, no print output<pre><code>&gt;&gt;&gt; output = list_columns(\n...     get_list_of_words(4 * 2),\n...     columnwise=False,\n...     cols_wide=2,\n...     print_output=False,\n... )\n&gt;&gt;&gt; print(output)\n</code></pre> Terminal<pre><code>a            aa\naaa          aaron\nab           abandoned\nabc          aberdeen\n</code></pre> <p>Conclusion: Successfully returned the formatted string.</p> Credit <p>Full credit goes to: https://stackoverflow.com/questions/1524126/how-to-print-a-list-more-nicely#answer-36085705</p> Source code in <code>src/toolbox_python/output.py</code> <pre><code>@typechecked\ndef list_columns(\n    obj: list,\n    cols_wide: int = 4,\n    columnwise: bool = True,\n    gap: int = 4,\n    print_output: bool = True,\n) -&gt; Optional[str]:\n    \"\"\"\n    !!! note Summary\n        Print the given list in evenly-spaced columns.\n\n    Params:\n        obj (list):\n            The list to be formatted.\n\n        cols_wide (int, optional):\n            The number of columns in which the list should be formatted.&lt;br&gt;\n            Defaults to: `#!py 4`.\n\n        columnwise (bool, optional):\n            Whether or not to print columnwise or rowwise.\n\n            - `#!py True`: Will be formatted column-wise.\n            - `#!py False`: Will be formatted row-wise.\n\n            Defaults to: `#!py True`.\n\n        gap (int, optional):\n            The number of spaces that should separate the longest column\n            item/s from the next column. This is the effective spacing\n            between columns based on the maximum `#!py len()` of the list items.&lt;br&gt;\n            Defaults to: `#!py 4`.\n\n        print_output (bool, optional):\n            Whether or not to print the output to the terminal.\n\n            - `#!py True`: Will print and return.\n            - `#!py False`: Will not print; only return.\n\n            Defaults to: `#!py True`.\n\n    Raises:\n        TypeError:\n            If any of the inputs parsed to the parameters of this function are not the correct type. Uses the [`@typeguard.typechecked`](https://typeguard.readthedocs.io/en/stable/api.html#typeguard.typechecked) decorator.\n\n    Returns:\n        printer (Optional[str]):\n            The formatted string object.\n\n    ???+ example \"Examples\"\n\n        ```{.py .python linenums=\"1\" title=\"Set up\"}\n        &gt;&gt;&gt; # Imports\n        &gt;&gt;&gt; from toolbox_python.output import list_columns\n        &gt;&gt;&gt; import requests\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # Define function to fetch list of words\n        &gt;&gt;&gt; def get_list_of_words(num_words: int = 100):\n        ...     word_url = \"https://www.mit.edu/~ecprice/wordlist.10000\"\n        ...     response = requests.get(word_url)\n        ...     words = response.content.decode().splitlines()\n        ...     return words[:num_words]\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Default parameters\"}\n        &gt;&gt;&gt; list_columns(get_list_of_words(4 * 5))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.txt .text title=\"Terminal\"}\n        a             abandoned     able          abraham\n        aa            abc           aboriginal    abroad\n        aaa           aberdeen      abortion      abs\n        aaron         abilities     about         absence\n        ab            ability       above         absent\n        ```\n        !!! success \"Conclusion: Successfully printed the list in columns.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Columnwise with 2 columns\"}\n        &gt;&gt;&gt; list_columns(\n        ...     get_list_of_words(5),\n        ...     cols_wide=2,\n        ...     columnwise=True,\n        ... )\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.txt .text title=\"Terminal\"}\n        a        aaron\n        aa       ab\n        aaa\n        ```\n        !!! success \"Conclusion: Successfully printed the list in columns.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 3: Rowwise with 3 columns\"}\n        &gt;&gt;&gt; list_columns(\n        ...     get_list_of_words(4 * 3),\n        ...     columnwise=False,\n        ...     cols_wide=3,\n        ...     print_output=True,\n        ... )\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.txt .text title=\"Terminal\"}\n        a             aa            aaa\n        aaron         ab            abandoned\n        abc           aberdeen      abilities\n        ability       able          aboriginal\n        ```\n        !!! success \"Conclusion: Successfully printed the list in rows.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 4: Rowwise with 2 columns, no print output\"}\n        &gt;&gt;&gt; output = list_columns(\n        ...     get_list_of_words(4 * 2),\n        ...     columnwise=False,\n        ...     cols_wide=2,\n        ...     print_output=False,\n        ... )\n        &gt;&gt;&gt; print(output)\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.txt .text title=\"Terminal\"}\n        a            aa\n        aaa          aaron\n        ab           abandoned\n        abc          aberdeen\n        ```\n        !!! success \"Conclusion: Successfully returned the formatted string.\"\n        &lt;/div&gt;\n\n    ??? Success \"Credit\"\n        Full credit goes to:&lt;br&gt;\n        https://stackoverflow.com/questions/1524126/how-to-print-a-list-more-nicely#answer-36085705\n    \"\"\"\n    string_list: list[str] = [str(item) for item in obj]\n    if cols_wide &gt; len(string_list):\n        cols_wide = len(string_list)\n    max_len: int = max(len(item) for item in string_list)\n    if columnwise:\n        cols_wide = int(ceil(len(string_list) / cols_wide))\n    segmented_list: list[list[str]] = [\n        string_list[index : index + cols_wide]\n        for index in range(0, len(string_list), cols_wide)\n    ]\n    if columnwise:\n        if len(segmented_list[-1]) != cols_wide:\n            segmented_list[-1].extend(\n                [\"\"] * (len(string_list) - len(segmented_list[-1]))\n            )\n        combined_list: Union[list[list[str]], Any] = zip(*segmented_list)\n    else:\n        combined_list = segmented_list\n    printer: str = \"\\n\".join(\n        [\n            \"\".join([element.ljust(max_len + gap) for element in group])\n            for group in combined_list\n        ]\n    )\n    if print_output:\n        print(printer)\n    return printer\n</code></pre>"},{"location":"code/retry/","title":"Retry","text":""},{"location":"code/retry/#toolbox_python.retry","title":"toolbox_python.retry","text":"<p>Summary</p> <p>The <code>retry</code> module is for enabling automatic retrying of a given function when a specific <code>Exception</code> is thrown.</p>"},{"location":"code/retry/#toolbox_python.retry.retry","title":"retry","text":"<pre><code>retry(\n    exceptions: _exceptions = Exception,\n    tries: int = 1,\n    delay: int = 0,\n    print_or_log: Optional[\n        Literal[\"print\", \"log\"]\n    ] = \"print\",\n) -&gt; Optional[Any]\n</code></pre> <p>Summary</p> <p>Retry a given function a number of times. Catching any known exceptions when they are given. And retrurning any output to either a terminal or a log file.</p> <p>Deprecated</p> <p>This function is deprecated. Please use the <code>retry()</code> decorator from the <code>stamina</code> package instead. For more info, see: Docs, GitHub, PyPi.</p> Details <p>This function should always be implemented as a decorator. It is written based on the premise that a certain process may fail and return a given message, but that is known and expected, and you just want to wait a second or so then retry again. Typically, this is seen in async processes, or when writing data to a <code>delta</code> table when there may be concurrent read/writes occurring at the same time. In these instances, you will know the error message and can re-try again a certain number of times.</p> <p>Parameters:</p> Name Type Description Default <code>exceptions</code> <code>_exceptions</code> <p>A given single or collection of expected exceptions for which to catch and retry for. Defaults to <code>Exception</code>.</p> <code>Exception</code> <code>tries</code> <code>int</code> <p>The number of retries to attempt. If the underlying process is still failing after this number of attempts, then throw a hard error and alert the user. Defaults to <code>1</code>.</p> <code>1</code> <code>delay</code> <code>int</code> <p>The number of seconds to delay between each retry. Defaults to <code>0</code>.</p> <code>0</code> <code>print_or_log</code> <code>Optional[Literal['print', 'log']]</code> <p>Whether or not the messages should be written to the terminal in a <code>print()</code> statement, or to a log file in a <code>log()</code> statement. Defaults to <code>\"print\"</code>.</p> <code>'print'</code> <p>Raises:</p> Type Description <code>TypeError</code> <p>If any of the inputs parsed to the parameters of this function are not the correct type. Uses the <code>@typeguard.typechecked</code> decorator.</p> <code>ValueError</code> <p>If either <code>tries</code> or <code>delay</code> are less than <code>0</code></p> <code>RuntimeError</code> <p>If either an unexpected <code>Exception</code> was thrown, which was not declared in the <code>exceptions</code> collection, or if the <code>func</code> was still not able to be executed after <code>tries</code> number of iterations.</p> <p>Returns:</p> Name Type Description <code>result</code> <code>Optional[Any]</code> <p>The result from the underlying function, if any.</p> Examples Imports<pre><code>&gt;&gt;&gt; from toolbox_python.retry import retry\n</code></pre> <p>Example 1: No error<pre><code>&gt;&gt;&gt; @retry(tries=5, delay=1, print_or_log=\"print\")\n&gt;&gt;&gt; def simple_func(var1:str=\"this\")-&gt;str:\n...     return var1\n&gt;&gt;&gt; simple_func()\n</code></pre> Terminal<pre><code># No error\n</code></pre> </p> <p>Example 2: Expected error<pre><code>&gt;&gt;&gt; @retry(exceptions=TypeError, tries=5, delay=1, print_or_log=\"print\")\n&gt;&gt;&gt; def failing_func(var1:str=\"that\")-&gt;None:\n...     raise ValueError(\"Incorrect value\")\n&gt;&gt;&gt; failing_func()\n</code></pre> Terminal<pre><code>Caught an expected error at iteration 1: `ValueError`. Retrying in 1 seconds...\nCaught an expected error at iteration 2: `ValueError`. Retrying in 1 seconds...\nCaught an expected error at iteration 3: `ValueError`. Retrying in 1 seconds...\nCaught an expected error at iteration 4: `ValueError`. Retrying in 1 seconds...\nCaught an expected error at iteration 5: `ValueError`. Retrying in 1 seconds...\nRuntimeError: Still could not write after 5 iterations. Please check.\n</code></pre> </p> Credit <p>Inspiration from:</p> <ul> <li>https://pypi.org/project/retry/</li> <li>https://stackoverflow.com/questions/21786382/pythonic-way-of-retry-running-a-function#answer-21788594</li> </ul> Source code in <code>src/toolbox_python/retry.py</code> <pre><code>@typechecked\ndef retry(\n    exceptions: _exceptions = Exception,\n    tries: int = 1,\n    delay: int = 0,\n    print_or_log: Optional[Literal[\"print\", \"log\"]] = \"print\",\n) -&gt; Optional[Any]:\n    \"\"\"\n    !!! note \"Summary\"\n        Retry a given function a number of times. Catching any known exceptions when they are given. And retrurning any output to either a terminal or a log file.\n\n    !!! deprecation \"Deprecated\"\n        This function is deprecated. Please use the [`retry()`][func] decorator from the [`stamina`][docs] package instead.&lt;br&gt;\n        For more info, see: [Docs][docs], [GitHub][github], [PyPi][pypi].\n        [func]: https://stamina.hynek.me/en/stable/api.html#stamina.retry\n        [docs]: https://stamina.hynek.me/en/stable/index.html\n        [github]: https://github.com/hynek/stamina/\n        [pypi]: https://pypi.org/project/stamina/\n\n    ???+ abstract \"Details\"\n        This function should always be implemented as a decorator.&lt;br&gt;\n        It is written based on the premise that a certain process may fail and return a given message, but that is known and expected, and you just want to wait a second or so then retry again.&lt;br&gt;\n        Typically, this is seen in async processes, or when writing data to a `delta` table when there may be concurrent read/writes occurring at the same time. In these instances, you will know the error message and can re-try again a certain number of times.\n\n    Params:\n        exceptions (_exceptions, optional):\n            A given single or collection of expected exceptions for which to catch and retry for.&lt;br&gt;\n            Defaults to `#!py Exception`.\n        tries (int, optional):\n            The number of retries to attempt. If the underlying process is still failing after this number of attempts, then throw a hard error and alert the user.&lt;br&gt;\n            Defaults to `#!py 1`.\n        delay (int, optional):\n            The number of seconds to delay between each retry.&lt;br&gt;\n            Defaults to `#!py 0`.\n        print_or_log (Optional[Literal[\"print\", \"log\"]], optional):\n            Whether or not the messages should be written to the terminal in a `#!py print()` statement, or to a log file in a `#!py log()` statement.&lt;br&gt;\n            Defaults to `#!py \"print\"`.\n\n    Raises:\n        TypeError: If any of the inputs parsed to the parameters of this function are not the correct type. Uses the [`@typeguard.typechecked`](https://typeguard.readthedocs.io/en/stable/api.html#typeguard.typechecked) decorator.\n        ValueError: If either `tries` or `delay` are less than `#!py 0`\n        RuntimeError: If _either_ an unexpected `#!py Exception` was thrown, which was not declared in the `exceptions` collection, _or_ if the `func` was still not able to be executed after `tries` number of iterations.\n\n    Returns:\n        result (Optional[Any]):\n            The result from the underlying function, if any.\n\n    ???+ example \"Examples\"\n\n        ```{.py .python linenums=\"1\" title=\"Imports\"}\n        &gt;&gt;&gt; from toolbox_python.retry import retry\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: No error\"}\n        &gt;&gt;&gt; @retry(tries=5, delay=1, print_or_log=\"print\")\n        &gt;&gt;&gt; def simple_func(var1:str=\"this\")-&gt;str:\n        ...     return var1\n        &gt;&gt;&gt; simple_func()\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        # No error\n        ```\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Expected error\"}\n        &gt;&gt;&gt; @retry(exceptions=TypeError, tries=5, delay=1, print_or_log=\"print\")\n        &gt;&gt;&gt; def failing_func(var1:str=\"that\")-&gt;None:\n        ...     raise ValueError(\"Incorrect value\")\n        &gt;&gt;&gt; failing_func()\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        Caught an expected error at iteration 1: `ValueError`. Retrying in 1 seconds...\n        Caught an expected error at iteration 2: `ValueError`. Retrying in 1 seconds...\n        Caught an expected error at iteration 3: `ValueError`. Retrying in 1 seconds...\n        Caught an expected error at iteration 4: `ValueError`. Retrying in 1 seconds...\n        Caught an expected error at iteration 5: `ValueError`. Retrying in 1 seconds...\n        RuntimeError: Still could not write after 5 iterations. Please check.\n        ```\n        &lt;/div&gt;\n\n    ??? success \"Credit\"\n        Inspiration from:\n\n        - https://pypi.org/project/retry/\n        - https://stackoverflow.com/questions/21786382/pythonic-way-of-retry-running-a-function#answer-21788594\n    \"\"\"\n    for param in [\"tries\", \"delay\"]:\n        if not eval(param) &gt;= 0:\n            raise ValueError(\n                f\"Invalid value for parameter `{param}`: {eval(param)}\\n\"\n                f\"Must be a positive integer.\"\n            )\n    if print_or_log == \"log\":\n        stk: inspect.FrameInfo = inspect.stack()[2]\n        mod: Union[ModuleType, None] = inspect.getmodule(stk[0])\n        if mod is not None:\n            log: Optional[Logger] = logging.getLogger(mod.__name__)\n    else:\n        log = None\n\n    def decorator(func: Callable):\n        @wraps(func)\n        def result(*args, **kwargs):\n            for i in range(1, tries + 1):\n                try:\n                    results = func(*args, **kwargs)\n                except exceptions as e:\n                    # Catch raw exceptions as defined in the `exceptions` parameter.\n                    message = (\n                        f\"Caught an expected error at iteration {i}: \"\n                        f\"`{get_full_class_name(e)}`. \"\n                        f\"Retrying in {delay} seconds...\"\n                    )\n                    print_or_log_output(\n                        message=message,\n                        print_or_log=print_or_log,\n                        log=log,\n                        log_level=\"warning\",\n                    )\n                    sleep(delay)\n                except Exception as exc:\n                    \"\"\"\n                    Catch unknown exception, however still need to check whether the name of any of the exceptions defined in `exceptions` are somehow listed in the text output of the caught exception.\n                    The cause here is shown in the below chunk. You see here that it throws a 'Py4JJavaError', which was not listed in the `exceptions` parameter, yet within the text output, it showed the 'ConcurrentDeleteReadException' which _was_ listed in the `exceptions` parameter. Therefore, in this instance, we still want to sleep and retry\n\n                    &gt;&gt;&gt; Caught an unexpected error at iteration 1: `py4j.protocol.Py4JJavaError`.\n                    &gt;&gt;&gt; Time for fct_Receipt: 27secs\n                    &gt;&gt;&gt; java.util.concurrent.ExecutionException: io.delta.exceptions.\n                    ...     ConcurrentDeleteReadException: This transaction attempted to read one or more files that were deleted (for example part-00001-563449ea-73e4-4d7d-8ba8-53fee1f8a5ff.c000.snappy.parquet in the root of the table) by a concurrent update. Please try the operation again.\n                    \"\"\"\n                    excs = (\n                        [exceptions]\n                        if not isinstance(exceptions, (list, tuple))\n                        else exceptions\n                    )\n                    exc_names = [exc.__name__ for exc in excs]\n                    if any(name in f\"{exc}\" for name in exc_names):\n                        caught_error = [name for name in exc_names if name in f\"{exc}\"]\n                        message = (\n                            f\"Caught an unexpected, known error at iteration {i}: \"\n                            f\"`{get_full_class_name(exc)}`.\\n\"\n                            f\"Who's message contains reference to underlying exception(s): {caught_error}.\\n\"\n                            f\"Retrying in {delay} seconds...\"\n                        )\n                        print_or_log_output(\n                            message=message,\n                            print_or_log=print_or_log,\n                            log=log,\n                            log_level=\"warning\",\n                        )\n                        sleep(delay)\n                    else:\n                        message = (\n                            f\"Caught an unexpected error at iteration {i}: \"\n                            f\"`{get_full_class_name(exc)}`.\"\n                        )\n                        print_or_log_output(\n                            message=message,\n                            print_or_log=print_or_log,\n                            log=log,\n                            log_level=\"error\",\n                        )\n                        raise RuntimeError(message) from exc\n                else:\n                    message = f\"Successfully executed at iteration {i}.\"\n                    print_or_log_output(\n                        message=message,\n                        print_or_log=print_or_log,\n                        log=log,\n                        log_level=\"info\",\n                    )\n                    return results\n            message = f\"Still could not write after {tries} iterations. Please check.\"\n            print_or_log_output(\n                message=message,\n                print_or_log=print_or_log,\n                log=log,\n                log_level=\"error\",\n            )\n            raise RuntimeError(message)\n\n        return result\n\n    return decorator\n</code></pre>"},{"location":"code/strings/","title":"Strings","text":""},{"location":"code/strings/#toolbox_python.strings","title":"toolbox_python.strings","text":"<p>Summary</p> <p>The <code>strings</code> module is for manipulating and checking certain string objects.</p>"},{"location":"code/strings/#toolbox_python.strings.str_replace","title":"str_replace","text":"<pre><code>str_replace(\n    old_string: str,\n    replace_chars: str = string.punctuation\n    + string.whitespace,\n    replace_with: str = \"\",\n) -&gt; str\n</code></pre> <p>Summary</p> <p>Replace the characters with a given string.</p> Details <p>Similar to the Python <code>str.replace()</code> method, but provides more customisation through the use of the <code>re</code> package.</p> <p>Parameters:</p> Name Type Description Default <code>old_string</code> <code>str</code> <p>The old string to be replaced.</p> required <code>replace_chars</code> <code>str</code> <p>The characters that need replacing. Defaults to <code>string.punctuation + string.whitespace</code>.</p> <code>punctuation + whitespace</code> <code>replace_with</code> <code>str</code> <p>The value to replace the characters with. Defaults to <code>\"\"</code>.</p> <code>''</code> <p>Raises:</p> Type Description <code>TypeError</code> <p>If any of the inputs parsed to the parameters of this function are not the correct type. Uses the <code>@typeguard.typechecked</code> decorator.</p> <p>Returns:</p> Type Description <code>str</code> <p>The new formatted string.</p> Examples Set up<pre><code>&gt;&gt;&gt; from toolbox_python.strings import str_replace\n&gt;&gt;&gt; long_string = \"This long string\"\n&gt;&gt;&gt; complex_sentence = \"Because my pizza was cold, I put it in the microwave.\"\n</code></pre> <p>Example 1: Replace all spaces (` `) with underscore (`_`)<pre><code>&gt;&gt;&gt; print(str_replace(long_string, \" \", \"_\"))\n</code></pre> Terminal<pre><code>\"This_long_string\"\n</code></pre> <p>Conclusion: Successful conversion.</p> <p>Example 2: Remove all punctuation and white space<pre><code>&gt;&gt;&gt; print(str_replace(complex_sentence))\n</code></pre> Terminal<pre><code>\"BecausemylunchwascoldIputitinthemicrowave\"\n</code></pre> <p>Conclusion: Successful conversion.</p> <p>Example 3: Invalid `old_string` input<pre><code>&gt;&gt;&gt; print(str_replace(123))\n</code></pre> Terminal<pre><code>TypeError: ...\n</code></pre> <p>Conclusion: Invalid input.</p> <p>Note: The same error will occur if <code>replace_chars</code> or <code>replace_with</code> are not of type <code>str</code>.</p> Credit <p>Full credit goes to: https://stackoverflow.com/questions/23996118/replace-special-characters-in-a-string-python#answer-23996414</p> See Also <ul> <li><code>re</code></li> </ul> Source code in <code>src/toolbox_python/strings.py</code> <pre><code>@typechecked\ndef str_replace(\n    old_string: str,\n    replace_chars: str = string.punctuation + string.whitespace,\n    replace_with: str = \"\",\n) -&gt; str:\n    \"\"\"\n    !!! note \"Summary\"\n        Replace the characters with a given string.\n\n    ???+ abstract \"Details\"\n        Similar to the Python `#!py str.replace()` method, but provides more customisation through the use of the [`re`](https://docs.python.org/3/library/re.html) package.\n\n    Params:\n        old_string (str):\n            The old string to be replaced.\n        replace_chars (str, optional):\n            The characters that need replacing.&lt;br&gt;\n            Defaults to `#!py string.punctuation + string.whitespace`.\n        replace_with (str, optional):\n            The value to replace the characters with.&lt;br&gt;\n            Defaults to `\"\"`.\n\n    Raises:\n        TypeError: If any of the inputs parsed to the parameters of this function are not the correct type. Uses the [`@typeguard.typechecked`](https://typeguard.readthedocs.io/en/stable/api.html#typeguard.typechecked) decorator.\n\n    Returns:\n        (str):\n            The new formatted string.\n\n    ???+ example \"Examples\"\n\n        ```{.py .python linenums=\"1\" title=\"Set up\"}\n        &gt;&gt;&gt; from toolbox_python.strings import str_replace\n        &gt;&gt;&gt; long_string = \"This long string\"\n        &gt;&gt;&gt; complex_sentence = \"Because my pizza was cold, I put it in the microwave.\"\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Replace all spaces (` `) with underscore (`_`)\"}\n        &gt;&gt;&gt; print(str_replace(long_string, \" \", \"_\"))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        \"This_long_string\"\n        ```\n        !!! success \"Conclusion: Successful conversion.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Remove all punctuation and white space\"}\n        &gt;&gt;&gt; print(str_replace(complex_sentence))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        \"BecausemylunchwascoldIputitinthemicrowave\"\n        ```\n        !!! success \"Conclusion: Successful conversion.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 3: Invalid `old_string` input\"}\n        &gt;&gt;&gt; print(str_replace(123))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        TypeError: ...\n        ```\n        !!! failure \"Conclusion: Invalid input.\"\n        !!! observation \"Note: The same error will occur if `replace_chars` or `replace_with` are not of type `str`.\"\n        &lt;/div&gt;\n\n    ??? success \"Credit\"\n        Full credit goes to:&lt;br&gt;\n        https://stackoverflow.com/questions/23996118/replace-special-characters-in-a-string-python#answer-23996414\n\n    ??? tip \"See Also\"\n        - [`re`](https://docs.python.org/3/library/re.html)\n    \"\"\"\n    chars: str = re.escape(replace_chars)\n    return re.sub(rf\"[{chars}]\", replace_with, old_string)\n</code></pre>"},{"location":"code/strings/#toolbox_python.strings.str_contains","title":"str_contains","text":"<pre><code>str_contains(check_string: str, sub_string: str) -&gt; bool\n</code></pre> <p>Summary</p> <p>Check whether one string contains another string.</p> Details <p>This is a super simple one-line function.</p> Example<pre><code>return True if sub_string in check_string else False\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>check_string</code> <code>str</code> <p>The main string to check.</p> required <code>sub_string</code> <code>str</code> <p>The substring to check.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If any of the inputs parsed to the parameters of this function are not the correct type. Uses the <code>@typeguard.typechecked</code> decorator.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if <code>sub_string</code> in <code>check_string</code></p> Examples Set up<pre><code>&gt;&gt;&gt; from toolbox_python.strings import str_contains\n&gt;&gt;&gt; long_string = \"This long string\"\n</code></pre> <p>Example 1: String is contained<pre><code>&gt;&gt;&gt; print(str_contains(long_string, \"long\"))\n</code></pre> Terminal<pre><code>True\n</code></pre> <p>Conclusion: <code>long_string</code> contains <code>\"long\"</code>.</p> <p>Example 2: String is not contained<pre><code>&gt;&gt;&gt; print(str_contains(long_string, \"short\"))\n</code></pre> Terminal<pre><code>False\n</code></pre> <p>Conclusion: <code>long_string</code> does not contain <code>\"short\"</code>.</p> <p>Example 3: Invalid `check_string` input<pre><code>&gt;&gt;&gt; print(str_contains(123, \"short\"))\n</code></pre> Terminal<pre><code>TypeError: ...\n</code></pre> <p>Conclusion: Invalid input.</p> <p>Note: The same error will occur if <code>sub_string</code> is not of type <code>str</code>.</p> See Also <ul> <li><code>str_contains_any()</code></li> <li><code>str_contains_all()</code></li> </ul> Source code in <code>src/toolbox_python/strings.py</code> <pre><code>@typechecked\ndef str_contains(check_string: str, sub_string: str) -&gt; bool:\n    \"\"\"\n    !!! note \"Summary\"\n        Check whether one string contains another string.\n\n    ???+ abstract \"Details\"\n        This is a super simple one-line function.\n\n        ```py linenums=\"1\" title=\"Example\"\n        return True if sub_string in check_string else False\n        ```\n\n    Params:\n        check_string (str):\n            The main string to check.\n        sub_string (str):\n            The substring to check.\n\n    Raises:\n        TypeError: If any of the inputs parsed to the parameters of this function are not the correct type. Uses the [`@typeguard.typechecked`](https://typeguard.readthedocs.io/en/stable/api.html#typeguard.typechecked) decorator.\n\n    Returns:\n        (bool):\n            `#!py True` if `#!py sub_string` in `#!py check_string`\n\n    ???+ example \"Examples\"\n\n        ```{.py .python linenums=\"1\" title=\"Set up\"}\n        &gt;&gt;&gt; from toolbox_python.strings import str_contains\n        &gt;&gt;&gt; long_string = \"This long string\"\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: String is contained\"}\n        &gt;&gt;&gt; print(str_contains(long_string, \"long\"))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        True\n        ```\n        !!! success \"Conclusion: `#!py long_string` contains `#!py \"long\"`.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: String is not contained\"}\n        &gt;&gt;&gt; print(str_contains(long_string, \"short\"))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        False\n        ```\n        !!! success \"Conclusion: `#!py long_string` does not contain `#!py \"short\"`.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 3: Invalid `check_string` input\"}\n        &gt;&gt;&gt; print(str_contains(123, \"short\"))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        TypeError: ...\n        ```\n        !!! failure \"Conclusion: Invalid input.\"\n        !!! observation \"Note: The same error will occur if `sub_string` is not of type `str`.\"\n        &lt;/div&gt;\n\n    ??? tip \"See Also\"\n        - [`str_contains_any()`][toolbox_python.strings.str_contains_any]\n        - [`str_contains_all()`][toolbox_python.strings.str_contains_all]\n    \"\"\"\n    return sub_string in check_string\n</code></pre>"},{"location":"code/strings/#toolbox_python.strings.str_contains_any","title":"str_contains_any","text":"<pre><code>str_contains_any(\n    check_string: str, sub_strings: str_list_tuple\n) -&gt; bool\n</code></pre> <p>Summary</p> <p>Check whether any one of a number of strings are contained within a main string.</p> <p>Parameters:</p> Name Type Description Default <code>check_string</code> <code>str</code> <p>The main string to check.</p> required <code>sub_strings</code> <code>str_list_tuple</code> <p>The collection of substrings to check.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If any of the inputs parsed to the parameters of this function are not the correct type. Uses the <code>@typeguard.typechecked</code> decorator.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if <code>any</code> of the strings in <code>sub_strings</code> are contained within <code>check_string</code>.</p> Examples Set up<pre><code>&gt;&gt;&gt; from toolbox_python.strings import str_contains_any\n&gt;&gt;&gt; long_string = \"This long string\"\n</code></pre> <p>Example 1: Contains any<pre><code>&gt;&gt;&gt; print(str_contains_any(long_string, [\"long\", \"short\"]))\n</code></pre> Terminal<pre><code>True\n</code></pre> <p>Conclusion: <code>long_string</code> contains either <code>\"long\"</code> or <code>\"short\"</code>.</p> <p>Example 2: Contains none<pre><code>&gt;&gt;&gt; print(str_contains_any(long_string, [\"this\", \"that\"]))\n</code></pre> Terminal<pre><code>False\n</code></pre> <p>Conclusion: <code>long_string</code> contains neither <code>\"this\"</code> nor <code>\"that\"</code>.</p> <p>Example 3: Invalid `check_string` input<pre><code>&gt;&gt;&gt; print(str_contains_any(123, [\"short\", \"long\"]))\n</code></pre> Terminal<pre><code>TypeError: ...\n</code></pre> <p>Conclusion: Invalid input.</p> <p>Note: The same error will occur if any of the elements in <code>sub_strings</code> are not of type <code>str</code>.</p> See Also <ul> <li><code>str_contains()</code></li> <li><code>str_contains_all()</code></li> </ul> Source code in <code>src/toolbox_python/strings.py</code> <pre><code>@typechecked\ndef str_contains_any(\n    check_string: str,\n    sub_strings: str_list_tuple,\n) -&gt; bool:\n    \"\"\"\n    !!! note \"Summary\"\n        Check whether any one of a number of strings are contained within a main string.\n\n    Params:\n        check_string (str):\n            The main string to check.\n        sub_strings (str_list_tuple):\n            The collection of substrings to check.\n\n    Raises:\n        TypeError: If any of the inputs parsed to the parameters of this function are not the correct type. Uses the [`@typeguard.typechecked`](https://typeguard.readthedocs.io/en/stable/api.html#typeguard.typechecked) decorator.\n\n    Returns:\n        (bool):\n            `#!py True` if `#!py any` of the strings in `#!py sub_strings` are contained within `#!py check_string`.\n\n    ???+ example \"Examples\"\n\n        ```{.py .python linenums=\"1\" title=\"Set up\"}\n        &gt;&gt;&gt; from toolbox_python.strings import str_contains_any\n        &gt;&gt;&gt; long_string = \"This long string\"\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Contains any\"}\n        &gt;&gt;&gt; print(str_contains_any(long_string, [\"long\", \"short\"]))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        True\n        ```\n        !!! success \"Conclusion: `#!py long_string` contains either `#!py \"long\"` or `#!py \"short\"`.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Contains none\"}\n        &gt;&gt;&gt; print(str_contains_any(long_string, [\"this\", \"that\"]))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        False\n        ```\n        !!! success \"Conclusion: `#!py long_string` contains neither `#!py \"this\"` nor `#!py \"that\"`.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 3: Invalid `check_string` input\"}\n        &gt;&gt;&gt; print(str_contains_any(123, [\"short\", \"long\"]))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        TypeError: ...\n        ```\n        !!! failure \"Conclusion: Invalid input.\"\n        !!! observation \"Note: The same error will occur if any of the elements in `sub_strings` are not of type `str`.\"\n        &lt;/div&gt;\n\n    ??? tip \"See Also\"\n        - [`str_contains()`][toolbox_python.strings.str_contains]\n        - [`str_contains_all()`][toolbox_python.strings.str_contains_all]\n    \"\"\"\n    return any(\n        str_contains(\n            check_string=check_string,\n            sub_string=sub_string,\n        )\n        for sub_string in sub_strings\n    )\n</code></pre>"},{"location":"code/strings/#toolbox_python.strings.str_contains_all","title":"str_contains_all","text":"<pre><code>str_contains_all(\n    check_string: str, sub_strings: str_list_tuple\n) -&gt; bool\n</code></pre> <p>Summary</p> <p>Check to ensure that all sub-strings are contained within a main string.</p> <p>Parameters:</p> Name Type Description Default <code>check_string</code> <code>str</code> <p>The main string to check.</p> required <code>sub_strings</code> <code>str_list_tuple</code> <p>The collection of substrings to check.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If any of the inputs parsed to the parameters of this function are not the correct type. Uses the <code>@typeguard.typechecked</code> decorator.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if <code>all</code> of the strings in <code>sub_strings</code> are contained within <code>check_string</code>.</p> Examples Set up<pre><code>&gt;&gt;&gt; from toolbox_python.strings import str_contains_all\n&gt;&gt;&gt; long_string = \"This long string\"\n</code></pre> <p>Example 1: Contains all<pre><code>&gt;&gt;&gt; print(str_contains_all(long_string, [\"long\", \"string\"]))\n</code></pre> Terminal<pre><code>True\n</code></pre> <p>Conclusion: <code>long_string</code> contains both <code>\"long\"</code> and <code>\"string\"</code>.</p> <p>Example 2: Contains some<pre><code>&gt;&gt;&gt; print(str_contains_all(long_string, [\"long\", \"something\"]))\n</code></pre> Terminal<pre><code>False\n</code></pre> <p>Conclusion: <code>long_string</code> contains <code>\"long\"</code> but not <code>\"something\"</code>.</p> <p>Example 3: Contains none<pre><code>&gt;&gt;&gt; print(str_contains_all(long_string, [\"this\", \"that\"]))\n</code></pre> Terminal<pre><code>False\n</code></pre> <p>Conclusion: <code>long_string</code> contains neither <code>\"this\"</code> nor <code>\"that\"</code>.</p> <p>Example 4: Invalid `check_string` input<pre><code>&gt;&gt;&gt; print(str_contains_all(123, [\"short\", \"long\"]))\n</code></pre> Terminal<pre><code>TypeError: ...\n</code></pre> <p>Conclusion: Invalid input.</p> <p>Note: The same error will occur if any of the elements in <code>sub_strings</code> are not of type <code>str</code>.</p> See Also <ul> <li><code>str_contains()</code></li> <li><code>str_contains_any()</code></li> </ul> Source code in <code>src/toolbox_python/strings.py</code> <pre><code>@typechecked\ndef str_contains_all(\n    check_string: str,\n    sub_strings: str_list_tuple,\n) -&gt; bool:\n    \"\"\"\n    !!! note \"Summary\"\n        Check to ensure that all sub-strings are contained within a main string.\n\n    Params:\n        check_string (str):\n            The main string to check.\n        sub_strings (str_list_tuple):\n            The collection of substrings to check.\n\n    Raises:\n        TypeError: If any of the inputs parsed to the parameters of this function are not the correct type. Uses the [`@typeguard.typechecked`](https://typeguard.readthedocs.io/en/stable/api.html#typeguard.typechecked) decorator.\n\n    Returns:\n        (bool):\n            `#!py True` if `#!py all` of the strings in `#!py sub_strings` are contained within `#!py check_string`.\n\n    ???+ example \"Examples\"\n\n        ```{.py .python linenums=\"1\" title=\"Set up\"}\n        &gt;&gt;&gt; from toolbox_python.strings import str_contains_all\n        &gt;&gt;&gt; long_string = \"This long string\"\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Contains all\"}\n        &gt;&gt;&gt; print(str_contains_all(long_string, [\"long\", \"string\"]))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        True\n        ```\n        !!! success \"Conclusion: `#!py long_string` contains both `#!py \"long\"` and `#!py \"string\"`.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Contains some\"}\n        &gt;&gt;&gt; print(str_contains_all(long_string, [\"long\", \"something\"]))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        False\n        ```\n        !!! failure \"Conclusion: `#!py long_string` contains `#!py \"long\"` but not `#!py \"something\"`.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 3: Contains none\"}\n        &gt;&gt;&gt; print(str_contains_all(long_string, [\"this\", \"that\"]))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        False\n        ```\n        !!! failure \"Conclusion: `#!py long_string` contains neither `#!py \"this\"` nor `#!py \"that\"`.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 4: Invalid `check_string` input\"}\n        &gt;&gt;&gt; print(str_contains_all(123, [\"short\", \"long\"]))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        TypeError: ...\n        ```\n        !!! failure \"Conclusion: Invalid input.\"\n        !!! observation \"Note: The same error will occur if any of the elements in `sub_strings` are not of type `str`.\"\n        &lt;/div&gt;\n\n    ??? tip \"See Also\"\n        - [`str_contains()`][toolbox_python.strings.str_contains]\n        - [`str_contains_any()`][toolbox_python.strings.str_contains_any]\n    \"\"\"\n    return all(\n        str_contains(\n            check_string=check_string,\n            sub_string=sub_string,\n        )\n        for sub_string in sub_strings\n    )\n</code></pre>"},{"location":"code/strings/#toolbox_python.strings.str_separate_number_chars","title":"str_separate_number_chars","text":"<pre><code>str_separate_number_chars(text: str) -&gt; str_list\n</code></pre> <p>Summary</p> <p>Take in a string that contains both numbers and letters, and output a list of strings, separated to have each element containing either entirely number or entirely letters.</p> Details <p>Uses regex (<code>re.split()</code>) to perform the actual splitting. Note, it will preserve special characters &amp; punctuation, but it will not preserve whitespaces.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The string to split.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If any of the inputs parsed to the parameters of this function are not the correct type. Uses the <code>@typeguard.typechecked</code> decorator.</p> <p>Returns:</p> Type Description <code>str_list</code> <p>The updated list, with each element of the list containing either entirely characters or entirely numbers.</p> Examples Set up<pre><code>&gt;&gt;&gt; from toolbox_python.strings import str_contains_all\n&gt;&gt;&gt; simple_string = \"-12.1grams\"\n&gt;&gt;&gt; complex_string = \"abcd2343 abw34324 abc3243-23A 123\"\n</code></pre> <p>Example 1: Simple split<pre><code>&gt;&gt;&gt; print(str_separate_number_chars(simple_string))\n</code></pre> Terminal<pre><code>[\"-12.1\", \"grams\"]\n</code></pre> <p>Conclusion: Successful split.</p> <p>Example 2: Complex split<pre><code>&gt;&gt;&gt; print(str_separate_number_chars(complex_string))\n</code></pre> Terminal<pre><code>[\n    \"abcd\",\n    \"2343\",\n    \"abw\",\n    \"34324\",\n    \"abc\",\n    \"3243\",\n    \"-23\",\n    \"A\",\n    \"123\",\n]\n</code></pre> <p>Conclusion: Successful split.</p> <p>Example 3: `text` does not contain any numbers<pre><code>&gt;&gt;&gt; print(str_separate_number_chars(\"abcd\"))\n</code></pre> Terminal<pre><code>[\"abcd\"]\n</code></pre> <p>Conclusion: No numbers in <code>text</code>, so returns a single-element long list.</p> <p>Example 4: Invalid `text` input<pre><code>&gt;&gt;&gt; print(str_separate_number_chars(123))\n</code></pre> Terminal<pre><code>TypeError: ...\n</code></pre> <p>Conclusion: Invalid input.</p> Credit <p>Full credit goes to: https://stackoverflow.com/questions/3340081/product-code-looks-like-abcd2343-how-to-split-by-letters-and-numbers#answer-63362709.</p> See Also <ul> <li><code>re</code></li> </ul> Source code in <code>src/toolbox_python/strings.py</code> <pre><code>@typechecked\ndef str_separate_number_chars(text: str) -&gt; str_list:\n    \"\"\"\n    !!! note \"Summary\"\n        Take in a string that contains both numbers and letters, and output a list of strings, separated to have each element containing either entirely number or entirely letters.\n\n    ???+ abstract \"Details\"\n        Uses regex ([`re.split()`](https://docs.python.org/3/library/re.html#re.split)) to perform the actual splitting.&lt;br&gt;\n        Note, it _will_ preserve special characters &amp; punctuation, but it _will not_ preserve whitespaces.\n\n    Params:\n        text (str):\n            The string to split.\n\n    Raises:\n        TypeError: If any of the inputs parsed to the parameters of this function are not the correct type. Uses the [`@typeguard.typechecked`](https://typeguard.readthedocs.io/en/stable/api.html#typeguard.typechecked) decorator.\n\n    Returns:\n        (str_list):\n            The updated list, with each element of the list containing either entirely characters or entirely numbers.\n\n    ???+ example \"Examples\"\n\n        ```{.py .python linenums=\"1\" title=\"Set up\"}\n        &gt;&gt;&gt; from toolbox_python.strings import str_contains_all\n        &gt;&gt;&gt; simple_string = \"-12.1grams\"\n        &gt;&gt;&gt; complex_string = \"abcd2343 abw34324 abc3243-23A 123\"\n        ```\n\n        ```{.py .python linenums=\"1\" title=\"Example 1: Simple split\"}\n        &gt;&gt;&gt; print(str_separate_number_chars(simple_string))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        [\"-12.1\", \"grams\"]\n        ```\n        !!! success \"Conclusion: Successful split.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 2: Complex split\"}\n        &gt;&gt;&gt; print(str_separate_number_chars(complex_string))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        [\n            \"abcd\",\n            \"2343\",\n            \"abw\",\n            \"34324\",\n            \"abc\",\n            \"3243\",\n            \"-23\",\n            \"A\",\n            \"123\",\n        ]\n        ```\n        !!! success \"Conclusion: Successful split.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 3: `text` does not contain any numbers\"}\n        &gt;&gt;&gt; print(str_separate_number_chars(\"abcd\"))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        [\"abcd\"]\n        ```\n        !!! success \"Conclusion: No numbers in `#!py text`, so returns a single-element long list.\"\n        &lt;/div&gt;\n\n        ```{.py .python linenums=\"1\" title=\"Example 4: Invalid `text` input\"}\n        &gt;&gt;&gt; print(str_separate_number_chars(123))\n        ```\n        &lt;div class=\"result\" markdown&gt;\n        ```{.sh .shell title=\"Terminal\"}\n        TypeError: ...\n        ```\n        !!! failure \"Conclusion: Invalid input.\"\n        &lt;/div&gt;\n\n    ??? success \"Credit\"\n        Full credit goes to:&lt;br&gt;\n        https://stackoverflow.com/questions/3340081/product-code-looks-like-abcd2343-how-to-split-by-letters-and-numbers#answer-63362709.\n\n    ??? tip \"See Also\"\n        - [`re`](https://docs.python.org/3/library/re.html)\n    \"\"\"\n    res = re.split(r\"([-+]?\\d+\\.\\d+)|([-+]?\\d+)\", text.strip())\n    return [r.strip() for r in res if r is not None and r.strip() != \"\"]\n</code></pre>"},{"location":"usage/overview/","title":"Overview","text":"<p>  # `toolbox-python`  [![version](https://img.shields.io/pypi/v/toolbox-python?label=version&amp;logo=python&amp;logoColor=ffde57)][pypi] [![github-release](https://img.shields.io/github/v/release/data-science-extensions/toolbox-python?logo=github)][github-release] [![implementation](https://img.shields.io/pypi/implementation/toolbox-python?logo=pypi)][pypi] [![python-versions](https://img.shields.io/pypi/pyversions/toolbox-python)][pypi] [![os](https://img.shields.io/static/v1?label=os&amp;message=ubuntu+|+macos+|+windows&amp;color=blue&amp;logo=ubuntu&amp;logoColor=green)][github-ci] [![pypi-status](https://img.shields.io/pypi/status/toolbox-python)][pypi] [![pypi-format](https://img.shields.io/pypi/format/toolbox-python)][pypi] [![github-license](https://img.shields.io/github/license/data-science-extensions/toolbox-python)][github-license] [![pypi-downloads](https://img.shields.io/pypi/dm/toolbox-python)][pypi] [![codecov-repo](https://codecov.io/gh/data-science-extensions/toolbox-python/graph/badge.svg)][codecov-repo] [![style](https://img.shields.io/static/v1?label=style&amp;message=black&amp;color=black&amp;logo=windows-terminal&amp;logoColor=white)](https://github.com/psf/black) [![contributions](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/data-science-extensions/toolbox-python) [![CI](https://github.com/data-science-extensions/toolbox-python/actions/workflows/ci.yml/badge.svg?event=pull_request)][github-ci] [![CD](https://github.com/data-science-extensions/toolbox-python/actions/workflows/cd.yml/badge.svg?event=release)][github-cd]  </p>"},{"location":"usage/overview/#introduction","title":"Introduction","text":"<p>The purpose of this package is to provide some helper files/functions/classes for generic Python processes.</p>"},{"location":"usage/overview/#key-urls","title":"Key URLs","text":"<p>For reference, these URL's are used:</p> Type Source URL Git Repo GitHub https://github.com/data-science-extensions/toolbox-python Python Package PyPI https://pypi.org/project/toolbox-python Package Docs ... ..."},{"location":"usage/overview/#installation","title":"Installation","text":"<p>You can install and use this package multiple ways by using <code>pip</code>, <code>pipenv</code>, or <code>poetry</code>.</p>"},{"location":"usage/overview/#using-pip","title":"Using <code>pip</code>:","text":"<ol> <li> <p>In your terminal, run:</p> <pre><code>python3 -m pip install --upgrade pip\npython3 -m pip install toolbox-python\n</code></pre> </li> <li> <p>Or, in your <code>requirements.txt</code> file, add:</p> <pre><code>toolbox-python\n</code></pre> <p>Then run:</p> <pre><code>python3 -m pip install --upgrade pip\npython3 -m pip install --requirement=requirements.txt\n</code></pre> </li> </ol>"},{"location":"usage/overview/#using-pipenv","title":"Using <code>pipenv</code>:","text":"<ol> <li> <p>Install using environment variables:</p> <p>In your <code>Pipfile</code> file, add:</p> <pre><code>[[source]]\nurl = \"https://pypi.org/simple\"\nverify_ssl = false\nname = \"pypi\"\n\n[packages]\ntoolbox-python = \"*\"\n</code></pre> <p>Then run:</p> <pre><code>python3 -m pip install pipenv\npython3 -m pipenv install --verbose --skip-lock --categories=root index=pypi toolbox-python\n</code></pre> </li> <li> <p>Or, in your <code>requirements.txt</code> file, add:</p> <pre><code>toolbox-python\n</code></pre> <p>Then run:</p> <pre><code>python3 -m run pipenv install --verbose --skip-lock --requirements=requirements.txt\n</code></pre> </li> <li> <p>Or just run this:</p> <pre><code>python3 -m pipenv install --verbose --skip-lock toolbox-python\n</code></pre> </li> </ol>"},{"location":"usage/overview/#using-poetry","title":"Using <code>poetry</code>:","text":"<ol> <li> <p>In your <code>pyproject.toml</code> file, add:</p> <pre><code>[tool.poetry.dependencies]\ntoolbox-python = \"*\"\n</code></pre> <p>Then run:</p> <pre><code>poetry install\n</code></pre> </li> <li> <p>Or just run this:</p> <pre><code>poetry add toolbox-python\npoetry install\npoetry sync\n</code></pre> </li> </ol>"},{"location":"usage/overview/#contribution","title":"Contribution","text":"<p>Contribution is always welcome.</p> <ol> <li> <p>First, either fork or branch the main repo.</p> </li> <li> <p>Clone your forked/branched repo.</p> </li> <li> <p>Build your environment:</p> <ol> <li> <p>With <code>pipenv</code> on Windows:</p> <pre><code>if (-not (Test-Path .venv)) {mkdir .venv}\npython -m pipenv install --requirements requirements.txt --requirements requirements-dev.txt --skip-lock\npython -m poetry run pre-commit install\npython -m poetry shell\n</code></pre> </li> <li> <p>With <code>pipenv</code> on Linux:</p> <pre><code>mkdir .venv\npython3 -m pipenv install --requirements requirements.txt --requirements requirements-dev.txt --skip-lock\npython3 -m poetry run pre-commit install\npython3 -m poetry shell\n</code></pre> </li> <li> <p>With <code>poetry</code> on Windows:</p> <pre><code>python -m pip install --upgrade pip\npython -m pip install poetry\npython -m poetry init\npython -m poetry add $(cat requirements/root.txt)\npython -m poetry add --group=dev $(cat requirements/dev.txt)\npython -m poetry add --group=test $(cat requirements/test.txt)\npython -m poetry add --group=docs $(cat requirements/docs.txt)\npython -m poetry install\npython -m poetry run pre-commit install\npython -m poetry shell\n</code></pre> </li> <li> <p>With <code>poetry</code> on Linux:</p> <pre><code>python3 -m pip install --upgrade pip\npython3 -m pip install poetry\npython3 -m poetry init\npython3 -m poetry add $(cat requirements/root.txt)\npython3 -m poetry add --group=dev $(cat requirements/dev.txt)\npython3 -m poetry add --group=test $(cat requirements/test.txt)\npython3 -m poetry add --group=docs $(cat requirements/docs.txt)\npython3 -m poetry install\npython3 -m poetry run pre-commit install\npython3 -m poetry shell\n</code></pre> </li> </ol> </li> <li> <p>Start contributing.</p> </li> <li> <p>When you're happy with the changes, raise a Pull Request to merge with the main branch again.</p> </li> </ol>"},{"location":"usage/overview/#build-and-test","title":"Build and Test","text":"<p>To ensure that the package is working as expected, please ensure that:</p> <ol> <li>You write your code as per PEP8 requirements.</li> <li>You write a UnitTest for each function/feature you include.</li> <li>The CodeCoverage is 100%.</li> <li>All UnitTests are passing.</li> <li>MyPy is passing 100%.</li> </ol>"},{"location":"usage/overview/#testing","title":"Testing","text":"<ul> <li> <p>Run them all together</p> <pre><code>poetry run make check\n</code></pre> </li> <li> <p>Or run them individually:</p> <ul> <li> <p>Black <pre><code>poetry run make check-black\n</code></pre></p> </li> <li> <p>PyTests:     <pre><code>poetry run make ckeck-pytest\n</code></pre></p> </li> <li> <p>MyPy:     <pre><code>poetry run make check-mypy\n</code></pre></p> </li> </ul> </li> </ul>"}]}